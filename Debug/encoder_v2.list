
encoder_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080027c8  080027c8  000127c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002848  08002848  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002848  08002848  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002848  08002848  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002848  08002848  00012848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000074  080028c4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080028c4  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007238  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016d9  00000000  00000000  000272d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  000289b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e8  00000000  00000000  00029050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172fd  00000000  00000000  00029638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000071b0  00000000  00000000  00040935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008414e  00000000  00000000  00047ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cbc33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf4  00000000  00000000  000cbc88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080027b0 	.word	0x080027b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080027b0 	.word	0x080027b0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <tm1637_CLKhigh>:

extern uint32_t Timer1;
extern uint8_t CurrentDisplay[4];
extern uint8_t tm1637_Segments[8];
void tm1637_CLKhigh()
{																	  	//SCL high period
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);		  	//Setting SCL frequency
 8000160:	2201      	movs	r2, #1
 8000162:	2140      	movs	r1, #64	; 0x40
 8000164:	4807      	ldr	r0, [pc, #28]	; (8000184 <tm1637_CLKhigh+0x28>)
 8000166:	f001 f990 	bl	800148a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800016a:	2201      	movs	r2, #1
 800016c:	2140      	movs	r1, #64	; 0x40
 800016e:	4805      	ldr	r0, [pc, #20]	; (8000184 <tm1637_CLKhigh+0x28>)
 8000170:	f001 f98b 	bl	800148a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000174:	2201      	movs	r2, #1
 8000176:	2140      	movs	r1, #64	; 0x40
 8000178:	4802      	ldr	r0, [pc, #8]	; (8000184 <tm1637_CLKhigh+0x28>)
 800017a:	f001 f986 	bl	800148a <HAL_GPIO_WritePin>
}
 800017e:	bf00      	nop
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40010c00 	.word	0x40010c00

08000188 <tm1637_CLKlow>:
void tm1637_CLKlow()
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);		//SCL low period
 800018c:	2200      	movs	r2, #0
 800018e:	2140      	movs	r1, #64	; 0x40
 8000190:	4807      	ldr	r0, [pc, #28]	; (80001b0 <tm1637_CLKlow+0x28>)
 8000192:	f001 f97a 	bl	800148a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2140      	movs	r1, #64	; 0x40
 800019a:	4805      	ldr	r0, [pc, #20]	; (80001b0 <tm1637_CLKlow+0x28>)
 800019c:	f001 f975 	bl	800148a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2140      	movs	r1, #64	; 0x40
 80001a4:	4802      	ldr	r0, [pc, #8]	; (80001b0 <tm1637_CLKlow+0x28>)
 80001a6:	f001 f970 	bl	800148a <HAL_GPIO_WritePin>
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010c00 	.word	0x40010c00

080001b4 <tm1637_SDOhigh>:
void tm1637_SDOhigh()
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);			//SDO high period
 80001b8:	2201      	movs	r2, #1
 80001ba:	2180      	movs	r1, #128	; 0x80
 80001bc:	4807      	ldr	r0, [pc, #28]	; (80001dc <tm1637_SDOhigh+0x28>)
 80001be:	f001 f964 	bl	800148a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80001c2:	2201      	movs	r2, #1
 80001c4:	2180      	movs	r1, #128	; 0x80
 80001c6:	4805      	ldr	r0, [pc, #20]	; (80001dc <tm1637_SDOhigh+0x28>)
 80001c8:	f001 f95f 	bl	800148a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	2180      	movs	r1, #128	; 0x80
 80001d0:	4802      	ldr	r0, [pc, #8]	; (80001dc <tm1637_SDOhigh+0x28>)
 80001d2:	f001 f95a 	bl	800148a <HAL_GPIO_WritePin>
}
 80001d6:	bf00      	nop
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	40010c00 	.word	0x40010c00

080001e0 <tm1637_SDOlow>:
void tm1637_SDOlow()
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);			//SDO low period
 80001e4:	2200      	movs	r2, #0
 80001e6:	2180      	movs	r1, #128	; 0x80
 80001e8:	4807      	ldr	r0, [pc, #28]	; (8000208 <tm1637_SDOlow+0x28>)
 80001ea:	f001 f94e 	bl	800148a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2180      	movs	r1, #128	; 0x80
 80001f2:	4805      	ldr	r0, [pc, #20]	; (8000208 <tm1637_SDOlow+0x28>)
 80001f4:	f001 f949 	bl	800148a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2180      	movs	r1, #128	; 0x80
 80001fc:	4802      	ldr	r0, [pc, #8]	; (8000208 <tm1637_SDOlow+0x28>)
 80001fe:	f001 f944 	bl	800148a <HAL_GPIO_WritePin>
}
 8000202:	bf00      	nop
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40010c00 	.word	0x40010c00

0800020c <tm1637_StartPacket>:
void tm1637_StartPacket()												//Lower SDO line while CLK line is high
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	tm1637_CLKhigh();
 8000210:	f7ff ffa4 	bl	800015c <tm1637_CLKhigh>

	tm1637_SDOhigh();
 8000214:	f7ff ffce 	bl	80001b4 <tm1637_SDOhigh>
	tm1637_SDOlow();
 8000218:	f7ff ffe2 	bl	80001e0 <tm1637_SDOlow>

	tm1637_CLKlow();
 800021c:	f7ff ffb4 	bl	8000188 <tm1637_CLKlow>
}
 8000220:	bf00      	nop
 8000222:	bd80      	pop	{r7, pc}

08000224 <tm1637_EndPacket>:
void tm1637_EndPacket()													//SDO line is pulled high while SCL line is high
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	tm1637_CLKlow();
 8000228:	f7ff ffae 	bl	8000188 <tm1637_CLKlow>
	tm1637_SDOlow();
 800022c:	f7ff ffd8 	bl	80001e0 <tm1637_SDOlow>

	tm1637_CLKhigh();
 8000230:	f7ff ff94 	bl	800015c <tm1637_CLKhigh>
	tm1637_SDOhigh();
 8000234:	f7ff ffbe 	bl	80001b4 <tm1637_SDOhigh>
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}

0800023c <tm1637_DataOut>:
void tm1637_DataOut(uint8_t *tm1637_TxBuffer)							//Low level data transfer function
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]

	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8000244:	2300      	movs	r3, #0
 8000246:	73fb      	strb	r3, [r7, #15]
 8000248:	e015      	b.n	8000276 <tm1637_DataOut+0x3a>
	{
		tm1637_CLKlow();
 800024a:	f7ff ff9d 	bl	8000188 <tm1637_CLKlow>
		if(tm1637_TxBuffer[j] == GPIO_PIN_SET)							//Check logic level
 800024e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	4413      	add	r3, r2
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b01      	cmp	r3, #1
 800025a:	d102      	bne.n	8000262 <tm1637_DataOut+0x26>
		{
			tm1637_SDOhigh();
 800025c:	f7ff ffaa 	bl	80001b4 <tm1637_SDOhigh>
 8000260:	e001      	b.n	8000266 <tm1637_DataOut+0x2a>

		}
		else
		{
			tm1637_SDOlow();
 8000262:	f7ff ffbd 	bl	80001e0 <tm1637_SDOlow>

		}
		tm1637_CLKhigh();
 8000266:	f7ff ff79 	bl	800015c <tm1637_CLKhigh>
	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 800026a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800026e:	b2db      	uxtb	r3, r3
 8000270:	3301      	adds	r3, #1
 8000272:	b2db      	uxtb	r3, r3
 8000274:	73fb      	strb	r3, [r7, #15]
 8000276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800027a:	2b07      	cmp	r3, #7
 800027c:	dde5      	ble.n	800024a <tm1637_DataOut+0xe>
	} 
}
 800027e:	bf00      	nop
 8000280:	bf00      	nop
 8000282:	3710      	adds	r7, #16
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <tm1637_TxCommand>:
void tm1637_TxCommand(uint8_t *Command)
{																		//Handles high level (bit by bit) transmission operation
 8000288:	b580      	push	{r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	uint8_t ByteData[8] = {0};
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	2300      	movs	r3, #0
 8000296:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8000298:	2300      	movs	r3, #0
 800029a:	75fb      	strb	r3, [r7, #23]
 800029c:	e015      	b.n	80002ca <tm1637_TxCommand+0x42>
	{

		ByteData[i] = (Command[0] & (0x01 << i)) && 1;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	461a      	mov	r2, r3
 80002a4:	7dfb      	ldrb	r3, [r7, #23]
 80002a6:	fa42 f303 	asr.w	r3, r2, r3
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	bf14      	ite	ne
 80002b2:	2301      	movne	r3, #1
 80002b4:	2300      	moveq	r3, #0
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	7dfb      	ldrb	r3, [r7, #23]
 80002ba:	f107 0118 	add.w	r1, r7, #24
 80002be:	440b      	add	r3, r1
 80002c0:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 80002c4:	7dfb      	ldrb	r3, [r7, #23]
 80002c6:	3301      	adds	r3, #1
 80002c8:	75fb      	strb	r3, [r7, #23]
 80002ca:	7dfb      	ldrb	r3, [r7, #23]
 80002cc:	2b07      	cmp	r3, #7
 80002ce:	d9e6      	bls.n	800029e <tm1637_TxCommand+0x16>

																		//Convert from byte to bit per array element
	}

	tm1637_StartPacket();												//Send start packet bit
 80002d0:	f7ff ff9c 	bl	800020c <tm1637_StartPacket>
	tm1637_DataOut(ByteData);											//Send one byte
 80002d4:	f107 030c 	add.w	r3, r7, #12
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ffaf 	bl	800023c <tm1637_DataOut>
	tm1637_CLKlow();													//Send one CLK for acknowledgment
 80002de:	f7ff ff53 	bl	8000188 <tm1637_CLKlow>
	tm1637_CLKhigh();
 80002e2:	f7ff ff3b 	bl	800015c <tm1637_CLKhigh>
	tm1637_ACKcheck();													//wait for acknowledgment.
 80002e6:	f000 f87f 	bl	80003e8 <tm1637_ACKcheck>
	if((Command[0] & 0xC0) != (0xC0))										//Check if the received packet is not an address.
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80002f2:	2bc0      	cmp	r3, #192	; 0xc0
 80002f4:	d001      	beq.n	80002fa <tm1637_TxCommand+0x72>
	{
		tm1637_EndPacket();
 80002f6:	f7ff ff95 	bl	8000224 <tm1637_EndPacket>
	}

}
 80002fa:	bf00      	nop
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <tm1637_TxData>:
void tm1637_TxData(uint8_t *Data, uint8_t PacketSize)
{																		//Handles high level (bit by bit) transmission operation
 8000302:	b580      	push	{r7, lr}
 8000304:	b086      	sub	sp, #24
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
 800030a:	460b      	mov	r3, r1
 800030c:	70fb      	strb	r3, [r7, #3]
	uint8_t ByteData[8] = {0};
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < PacketSize; i++)
 8000316:	2300      	movs	r3, #0
 8000318:	75fb      	strb	r3, [r7, #23]
 800031a:	e02b      	b.n	8000374 <tm1637_TxData+0x72>
	{
		for(uint8_t j = 0; j < 8; j++)
 800031c:	2300      	movs	r3, #0
 800031e:	75bb      	strb	r3, [r7, #22]
 8000320:	e017      	b.n	8000352 <tm1637_TxData+0x50>
		{
			ByteData[j] = (Data[i] & (0x01 << j)) && 1;
 8000322:	7dfb      	ldrb	r3, [r7, #23]
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	4413      	add	r3, r2
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	461a      	mov	r2, r3
 800032c:	7dbb      	ldrb	r3, [r7, #22]
 800032e:	fa42 f303 	asr.w	r3, r2, r3
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	2b00      	cmp	r3, #0
 8000338:	bf14      	ite	ne
 800033a:	2301      	movne	r3, #1
 800033c:	2300      	moveq	r3, #0
 800033e:	b2da      	uxtb	r2, r3
 8000340:	7dbb      	ldrb	r3, [r7, #22]
 8000342:	f107 0118 	add.w	r1, r7, #24
 8000346:	440b      	add	r3, r1
 8000348:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t j = 0; j < 8; j++)
 800034c:	7dbb      	ldrb	r3, [r7, #22]
 800034e:	3301      	adds	r3, #1
 8000350:	75bb      	strb	r3, [r7, #22]
 8000352:	7dbb      	ldrb	r3, [r7, #22]
 8000354:	2b07      	cmp	r3, #7
 8000356:	d9e4      	bls.n	8000322 <tm1637_TxData+0x20>
		}
		tm1637_DataOut(ByteData);
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff6d 	bl	800023c <tm1637_DataOut>
		tm1637_CLKlow();
 8000362:	f7ff ff11 	bl	8000188 <tm1637_CLKlow>
		tm1637_CLKhigh();
 8000366:	f7ff fef9 	bl	800015c <tm1637_CLKhigh>
		tm1637_ACKcheck();												//Transmit byte by byte
 800036a:	f000 f83d 	bl	80003e8 <tm1637_ACKcheck>
	for(uint8_t i = 0; i < PacketSize; i++)
 800036e:	7dfb      	ldrb	r3, [r7, #23]
 8000370:	3301      	adds	r3, #1
 8000372:	75fb      	strb	r3, [r7, #23]
 8000374:	7dfa      	ldrb	r2, [r7, #23]
 8000376:	78fb      	ldrb	r3, [r7, #3]
 8000378:	429a      	cmp	r2, r3
 800037a:	d3cf      	bcc.n	800031c <tm1637_TxData+0x1a>

	}
	tm1637_EndPacket();													//Send end packet at the end of data transmission.
 800037c:	f7ff ff52 	bl	8000224 <tm1637_EndPacket>


}
 8000380:	bf00      	nop
 8000382:	3718      	adds	r7, #24
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <tm1637_Initialize>:
void tm1637_Initialize(uint8_t Direction)								//Since SDI line is doing both transmission and reception
{																		//the corresponding GPIO pin must be reinitialized on the run
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 8000392:	f107 0308 	add.w	r3, r7, #8
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = SCLK_Pin;
 80003a0:	2340      	movs	r3, #64	; 0x40
 80003a2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a4:	2300      	movs	r3, #0
 80003a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a8:	2302      	movs	r3, #2
 80003aa:	617b      	str	r3, [r7, #20]
	switch (Direction)													//Depending on the function input initialize the pin as input or output
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d00a      	beq.n	80003c8 <tm1637_Initialize+0x40>
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d111      	bne.n	80003da <tm1637_Initialize+0x52>
	{
		case DISPLAY2STM:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	4619      	mov	r1, r3
 80003c0:	4808      	ldr	r0, [pc, #32]	; (80003e4 <tm1637_Initialize+0x5c>)
 80003c2:	f000 fec7 	bl	8001154 <HAL_GPIO_Init>
			break;
 80003c6:	e008      	b.n	80003da <tm1637_Initialize+0x52>
		case STM2DISPLAY:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003cc:	f107 0308 	add.w	r3, r7, #8
 80003d0:	4619      	mov	r1, r3
 80003d2:	4804      	ldr	r0, [pc, #16]	; (80003e4 <tm1637_Initialize+0x5c>)
 80003d4:	f000 febe 	bl	8001154 <HAL_GPIO_Init>
			break;
 80003d8:	bf00      	nop

	}

}
 80003da:	bf00      	nop
 80003dc:	3718      	adds	r7, #24
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40011400 	.word	0x40011400

080003e8 <tm1637_ACKcheck>:
void tm1637_ACKcheck()
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	//Wait for acknowledgment bit
	tm1637_Initialize(DISPLAY2STM);										//initialize pin as input
 80003ec:	2001      	movs	r0, #1
 80003ee:	f7ff ffcb 	bl	8000388 <tm1637_Initialize>
	tm1637_CLKlow();													//lower CLK line
 80003f2:	f7ff fec9 	bl	8000188 <tm1637_CLKlow>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 80003f6:	e002      	b.n	80003fe <tm1637_ACKcheck+0x16>
	tm1637_Initialize(STM2DISPLAY);										//initialize pin as output for data transfer
 80003f8:	2000      	movs	r0, #0
 80003fa:	f7ff ffc5 	bl	8000388 <tm1637_Initialize>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 80003fe:	2140      	movs	r1, #64	; 0x40
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <tm1637_ACKcheck+0x2c>)
 8000402:	f001 f82b 	bl	800145c <HAL_GPIO_ReadPin>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d1f5      	bne.n	80003f8 <tm1637_ACKcheck+0x10>
}
 800040c:	bf00      	nop
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40010c00 	.word	0x40010c00

08000418 <tm1637_DisplayHandle>:
	tm1637_TxData(EmptyBuffer, 4);
	CommandCarrier[0] = DISPLAY_OFF;
	tm1637_TxCommand(CommandCarrier);
}
uint8_t tm1637_DisplayHandle(uint8_t Brightness, uint8_t *DisplayBuffer)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	6039      	str	r1, [r7, #0]
 8000422:	71fb      	strb	r3, [r7, #7]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t CommandCarrier[1] = {0};
 8000424:	2300      	movs	r3, #0
 8000426:	733b      	strb	r3, [r7, #12]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8000428:	2301      	movs	r3, #1
 800042a:	73fb      	strb	r3, [r7, #15]
	if(Brightness <= 7)												//there are 7 levels of brightness
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	2b07      	cmp	r3, #7
 8000430:	d819      	bhi.n	8000466 <tm1637_DisplayHandle+0x4e>
	{
	  CommandCarrier[0] = DATA_SET;									//Send set data command
 8000432:	2340      	movs	r3, #64	; 0x40
 8000434:	733b      	strb	r3, [r7, #12]
	  tm1637_TxCommand(CommandCarrier);
 8000436:	f107 030c 	add.w	r3, r7, #12
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ff24 	bl	8000288 <tm1637_TxCommand>
	  CommandCarrier[0] = C0H;										//Set address
 8000440:	23c0      	movs	r3, #192	; 0xc0
 8000442:	733b      	strb	r3, [r7, #12]
	  tm1637_TxCommand(CommandCarrier);
 8000444:	f107 030c 	add.w	r3, r7, #12
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff1d 	bl	8000288 <tm1637_TxCommand>

	  tm1637_TxData(DisplayBuffer, 4);								//Map the data stored in RAM to the display
 800044e:	2104      	movs	r1, #4
 8000450:	6838      	ldr	r0, [r7, #0]
 8000452:	f7ff ff56 	bl	8000302 <tm1637_TxData>
	  tm1637_SetBrighness(Brightness);								//Turn on display and set brightness
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	4618      	mov	r0, r3
 800045a:	f000 f809 	bl	8000470 <tm1637_SetBrighness>
		ParameterFalidation = TM1637_OK;
 800045e:	2300      	movs	r3, #0
 8000460:	73fb      	strb	r3, [r7, #15]
		return ParameterFalidation;
 8000462:	7bfb      	ldrb	r3, [r7, #15]
 8000464:	e000      	b.n	8000468 <tm1637_DisplayHandle+0x50>
	}
	return ParameterFalidation;
 8000466:	7bfb      	ldrb	r3, [r7, #15]
}
 8000468:	4618      	mov	r0, r3
 800046a:	3710      	adds	r7, #16
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <tm1637_SetBrighness>:
tm1637_StatusTypedef tm1637_SetBrighness(uint8_t BrighnessLevel)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
	uint8_t BrighnessBuffer[8] = {0};
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8000482:	2301      	movs	r3, #1
 8000484:	75bb      	strb	r3, [r7, #22]
	if(BrighnessLevel <= 7)												//there are 7 levels of brightness
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b07      	cmp	r3, #7
 800048a:	d830      	bhi.n	80004ee <tm1637_SetBrighness+0x7e>
	{																	//Any value above that will be ignored.
		BrighnessLevel = BrighnessLevel | DISPLAY_ON;					//Set Brightness level with display on command
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000492:	71fb      	strb	r3, [r7, #7]

		for(uint8_t i = 0; i < 8; i++)
 8000494:	2300      	movs	r3, #0
 8000496:	75fb      	strb	r3, [r7, #23]
 8000498:	e013      	b.n	80004c2 <tm1637_SetBrighness+0x52>
		{
			BrighnessBuffer[i] = (BrighnessLevel & (0x01 << i)) && 1;
 800049a:	79fa      	ldrb	r2, [r7, #7]
 800049c:	7dfb      	ldrb	r3, [r7, #23]
 800049e:	fa42 f303 	asr.w	r3, r2, r3
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	bf14      	ite	ne
 80004aa:	2301      	movne	r3, #1
 80004ac:	2300      	moveq	r3, #0
 80004ae:	b2da      	uxtb	r2, r3
 80004b0:	7dfb      	ldrb	r3, [r7, #23]
 80004b2:	f107 0118 	add.w	r1, r7, #24
 80004b6:	440b      	add	r3, r1
 80004b8:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < 8; i++)
 80004bc:	7dfb      	ldrb	r3, [r7, #23]
 80004be:	3301      	adds	r3, #1
 80004c0:	75fb      	strb	r3, [r7, #23]
 80004c2:	7dfb      	ldrb	r3, [r7, #23]
 80004c4:	2b07      	cmp	r3, #7
 80004c6:	d9e8      	bls.n	800049a <tm1637_SetBrighness+0x2a>
		}
		tm1637_StartPacket();
 80004c8:	f7ff fea0 	bl	800020c <tm1637_StartPacket>
		tm1637_DataOut(BrighnessBuffer);
 80004cc:	f107 030c 	add.w	r3, r7, #12
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff feb3 	bl	800023c <tm1637_DataOut>
		tm1637_CLKlow();													//Send one CLK for acknowledgment
 80004d6:	f7ff fe57 	bl	8000188 <tm1637_CLKlow>
		tm1637_CLKhigh();
 80004da:	f7ff fe3f 	bl	800015c <tm1637_CLKhigh>
		tm1637_ACKcheck();													//wait for acknowledgment.
 80004de:	f7ff ff83 	bl	80003e8 <tm1637_ACKcheck>
		tm1637_EndPacket();
 80004e2:	f7ff fe9f 	bl	8000224 <tm1637_EndPacket>
		ParameterFalidation = TM1637_OK;
 80004e6:	2300      	movs	r3, #0
 80004e8:	75bb      	strb	r3, [r7, #22]
		return ParameterFalidation;
 80004ea:	7dbb      	ldrb	r3, [r7, #22]
 80004ec:	e000      	b.n	80004f0 <tm1637_SetBrighness+0x80>
	}
	return ParameterFalidation;
 80004ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3718      	adds	r7, #24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <char2segments>:
		  }

	  }
}

uint8_t char2segments(char c) {
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
        switch (c) {
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	3b20      	subs	r3, #32
 8000506:	2b5a      	cmp	r3, #90	; 0x5a
 8000508:	f200 811a 	bhi.w	8000740 <char2segments+0x248>
 800050c:	a201      	add	r2, pc, #4	; (adr r2, 8000514 <char2segments+0x1c>)
 800050e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000512:	bf00      	nop
 8000514:	080006b9 	.word	0x080006b9
 8000518:	08000741 	.word	0x08000741
 800051c:	08000741 	.word	0x08000741
 8000520:	08000741 	.word	0x08000741
 8000524:	08000741 	.word	0x08000741
 8000528:	08000741 	.word	0x08000741
 800052c:	08000741 	.word	0x08000741
 8000530:	08000741 	.word	0x08000741
 8000534:	08000741 	.word	0x08000741
 8000538:	08000741 	.word	0x08000741
 800053c:	080006b5 	.word	0x080006b5
 8000540:	08000741 	.word	0x08000741
 8000544:	08000741 	.word	0x08000741
 8000548:	080006b1 	.word	0x080006b1
 800054c:	08000741 	.word	0x08000741
 8000550:	08000741 	.word	0x08000741
 8000554:	08000681 	.word	0x08000681
 8000558:	08000685 	.word	0x08000685
 800055c:	08000689 	.word	0x08000689
 8000560:	0800068d 	.word	0x0800068d
 8000564:	08000691 	.word	0x08000691
 8000568:	08000695 	.word	0x08000695
 800056c:	08000699 	.word	0x08000699
 8000570:	0800069d 	.word	0x0800069d
 8000574:	080006a1 	.word	0x080006a1
 8000578:	080006a5 	.word	0x080006a5
 800057c:	08000741 	.word	0x08000741
 8000580:	08000741 	.word	0x08000741
 8000584:	08000741 	.word	0x08000741
 8000588:	08000741 	.word	0x08000741
 800058c:	08000741 	.word	0x08000741
 8000590:	08000741 	.word	0x08000741
 8000594:	08000741 	.word	0x08000741
 8000598:	080006bd 	.word	0x080006bd
 800059c:	080006c5 	.word	0x080006c5
 80005a0:	080006c9 	.word	0x080006c9
 80005a4:	080006d1 	.word	0x080006d1
 80005a8:	080006d5 	.word	0x080006d5
 80005ac:	080006d9 	.word	0x080006d9
 80005b0:	080006dd 	.word	0x080006dd
 80005b4:	080006e1 	.word	0x080006e1
 80005b8:	080006e9 	.word	0x080006e9
 80005bc:	080006f1 	.word	0x080006f1
 80005c0:	080006f9 	.word	0x080006f9
 80005c4:	080006fd 	.word	0x080006fd
 80005c8:	08000701 	.word	0x08000701
 80005cc:	08000705 	.word	0x08000705
 80005d0:	08000709 	.word	0x08000709
 80005d4:	0800070d 	.word	0x0800070d
 80005d8:	08000711 	.word	0x08000711
 80005dc:	08000719 	.word	0x08000719
 80005e0:	0800071d 	.word	0x0800071d
 80005e4:	08000721 	.word	0x08000721
 80005e8:	08000725 	.word	0x08000725
 80005ec:	08000729 	.word	0x08000729
 80005f0:	0800072d 	.word	0x0800072d
 80005f4:	08000735 	.word	0x08000735
 80005f8:	08000739 	.word	0x08000739
 80005fc:	0800073d 	.word	0x0800073d
 8000600:	08000741 	.word	0x08000741
 8000604:	08000741 	.word	0x08000741
 8000608:	08000741 	.word	0x08000741
 800060c:	080006ad 	.word	0x080006ad
 8000610:	080006a9 	.word	0x080006a9
 8000614:	08000741 	.word	0x08000741
 8000618:	080006c1 	.word	0x080006c1
 800061c:	080006c5 	.word	0x080006c5
 8000620:	080006cd 	.word	0x080006cd
 8000624:	080006d1 	.word	0x080006d1
 8000628:	080006d5 	.word	0x080006d5
 800062c:	080006d9 	.word	0x080006d9
 8000630:	080006dd 	.word	0x080006dd
 8000634:	080006e5 	.word	0x080006e5
 8000638:	080006ed 	.word	0x080006ed
 800063c:	080006f5 	.word	0x080006f5
 8000640:	080006f9 	.word	0x080006f9
 8000644:	080006fd 	.word	0x080006fd
 8000648:	08000701 	.word	0x08000701
 800064c:	08000705 	.word	0x08000705
 8000650:	08000709 	.word	0x08000709
 8000654:	0800070d 	.word	0x0800070d
 8000658:	08000715 	.word	0x08000715
 800065c:	08000719 	.word	0x08000719
 8000660:	0800071d 	.word	0x0800071d
 8000664:	08000721 	.word	0x08000721
 8000668:	08000725 	.word	0x08000725
 800066c:	08000729 	.word	0x08000729
 8000670:	08000731 	.word	0x08000731
 8000674:	08000735 	.word	0x08000735
 8000678:	08000739 	.word	0x08000739
 800067c:	0800073d 	.word	0x0800073d
			case '0' : return 0x3f;
 8000680:	233f      	movs	r3, #63	; 0x3f
 8000682:	e05e      	b.n	8000742 <char2segments+0x24a>
			case '1' : return 0x06;
 8000684:	2306      	movs	r3, #6
 8000686:	e05c      	b.n	8000742 <char2segments+0x24a>
			case '2' : return 0x5b;
 8000688:	235b      	movs	r3, #91	; 0x5b
 800068a:	e05a      	b.n	8000742 <char2segments+0x24a>
			case '3' : return 0x4f;
 800068c:	234f      	movs	r3, #79	; 0x4f
 800068e:	e058      	b.n	8000742 <char2segments+0x24a>
			case '4' : return 0x66;
 8000690:	2366      	movs	r3, #102	; 0x66
 8000692:	e056      	b.n	8000742 <char2segments+0x24a>
			case '5' : return 0x6d;
 8000694:	236d      	movs	r3, #109	; 0x6d
 8000696:	e054      	b.n	8000742 <char2segments+0x24a>
			case '6' : return 0x7d;
 8000698:	237d      	movs	r3, #125	; 0x7d
 800069a:	e052      	b.n	8000742 <char2segments+0x24a>
			case '7' : return 0x07;
 800069c:	2307      	movs	r3, #7
 800069e:	e050      	b.n	8000742 <char2segments+0x24a>
			case '8' : return 0x7f;
 80006a0:	237f      	movs	r3, #127	; 0x7f
 80006a2:	e04e      	b.n	8000742 <char2segments+0x24a>
			case '9' : return 0x6f;
 80006a4:	236f      	movs	r3, #111	; 0x6f
 80006a6:	e04c      	b.n	8000742 <char2segments+0x24a>
            case '_' : return 0x08;
 80006a8:	2308      	movs	r3, #8
 80006aa:	e04a      	b.n	8000742 <char2segments+0x24a>
            case '^' : return 0x01; // ¯
 80006ac:	2301      	movs	r3, #1
 80006ae:	e048      	b.n	8000742 <char2segments+0x24a>
            case '-' : return 0x40;
 80006b0:	2340      	movs	r3, #64	; 0x40
 80006b2:	e046      	b.n	8000742 <char2segments+0x24a>
            case '*' : return 0x63; // °
 80006b4:	2363      	movs	r3, #99	; 0x63
 80006b6:	e044      	b.n	8000742 <char2segments+0x24a>
            case ' ' : return 0x00; // space
 80006b8:	2300      	movs	r3, #0
 80006ba:	e042      	b.n	8000742 <char2segments+0x24a>
            case 'A' : return 0x77; // upper case A
 80006bc:	2377      	movs	r3, #119	; 0x77
 80006be:	e040      	b.n	8000742 <char2segments+0x24a>
            case 'a' : return 0x5f; // lower case a
 80006c0:	235f      	movs	r3, #95	; 0x5f
 80006c2:	e03e      	b.n	8000742 <char2segments+0x24a>
            case 'B' :              // lower case b
            case 'b' : return 0x7c; // lower case b
 80006c4:	237c      	movs	r3, #124	; 0x7c
 80006c6:	e03c      	b.n	8000742 <char2segments+0x24a>
            case 'C' : return 0x39; // upper case C
 80006c8:	2339      	movs	r3, #57	; 0x39
 80006ca:	e03a      	b.n	8000742 <char2segments+0x24a>
            case 'c' : return 0x58; // lower case c
 80006cc:	2358      	movs	r3, #88	; 0x58
 80006ce:	e038      	b.n	8000742 <char2segments+0x24a>
            case 'D' :              // lower case d
            case 'd' : return 0x5e; // lower case d
 80006d0:	235e      	movs	r3, #94	; 0x5e
 80006d2:	e036      	b.n	8000742 <char2segments+0x24a>
            case 'E' :              // upper case E
            case 'e' : return 0x79; // upper case E
 80006d4:	2379      	movs	r3, #121	; 0x79
 80006d6:	e034      	b.n	8000742 <char2segments+0x24a>
            case 'F' :              // upper case F
            case 'f' : return 0x71; // upper case F
 80006d8:	2371      	movs	r3, #113	; 0x71
 80006da:	e032      	b.n	8000742 <char2segments+0x24a>
            case 'G' :              // upper case G
            case 'g' : return 0x35; // upper case G
 80006dc:	2335      	movs	r3, #53	; 0x35
 80006de:	e030      	b.n	8000742 <char2segments+0x24a>
            case 'H' : return 0x76; // upper case H
 80006e0:	2376      	movs	r3, #118	; 0x76
 80006e2:	e02e      	b.n	8000742 <char2segments+0x24a>
            case 'h' : return 0x74; // lower case h
 80006e4:	2374      	movs	r3, #116	; 0x74
 80006e6:	e02c      	b.n	8000742 <char2segments+0x24a>
            case 'I' : return 0x06; // 1
 80006e8:	2306      	movs	r3, #6
 80006ea:	e02a      	b.n	8000742 <char2segments+0x24a>
            case 'i' : return 0x04; // lower case i
 80006ec:	2304      	movs	r3, #4
 80006ee:	e028      	b.n	8000742 <char2segments+0x24a>
            case 'J' : return 0x1e; // upper case J
 80006f0:	231e      	movs	r3, #30
 80006f2:	e026      	b.n	8000742 <char2segments+0x24a>
            case 'j' : return 0x16; // lower case j
 80006f4:	2316      	movs	r3, #22
 80006f6:	e024      	b.n	8000742 <char2segments+0x24a>
            case 'K' :              // upper case K
            case 'k' : return 0x75; // upper case K
 80006f8:	2375      	movs	r3, #117	; 0x75
 80006fa:	e022      	b.n	8000742 <char2segments+0x24a>
            case 'L' :              // upper case L
            case 'l' : return 0x38; // upper case L
 80006fc:	2338      	movs	r3, #56	; 0x38
 80006fe:	e020      	b.n	8000742 <char2segments+0x24a>
            case 'M' :              // twice tall n
            case 'm' : return 0x37; // twice tall ∩
 8000700:	2337      	movs	r3, #55	; 0x37
 8000702:	e01e      	b.n	8000742 <char2segments+0x24a>
            case 'N' :              // lower case n
            case 'n' : return 0x54; // lower case n
 8000704:	2354      	movs	r3, #84	; 0x54
 8000706:	e01c      	b.n	8000742 <char2segments+0x24a>
            case 'O' :              // lower case o
            case 'o' : return 0x5c; // lower case o
 8000708:	235c      	movs	r3, #92	; 0x5c
 800070a:	e01a      	b.n	8000742 <char2segments+0x24a>
            case 'P' :              // upper case P
            case 'p' : return 0x73; // upper case P
 800070c:	2373      	movs	r3, #115	; 0x73
 800070e:	e018      	b.n	8000742 <char2segments+0x24a>
            case 'Q' : return 0x7b; // upper case Q
 8000710:	237b      	movs	r3, #123	; 0x7b
 8000712:	e016      	b.n	8000742 <char2segments+0x24a>
            case 'q' : return 0x67; // lower case q
 8000714:	2367      	movs	r3, #103	; 0x67
 8000716:	e014      	b.n	8000742 <char2segments+0x24a>
            case 'R' :              // lower case r
            case 'r' : return 0x50; // lower case r
 8000718:	2350      	movs	r3, #80	; 0x50
 800071a:	e012      	b.n	8000742 <char2segments+0x24a>
            case 'S' :              // 5
            case 's' : return 0x6d; // 5
 800071c:	236d      	movs	r3, #109	; 0x6d
 800071e:	e010      	b.n	8000742 <char2segments+0x24a>
            case 'T' :              // lower case t
            case 't' : return 0x78; // lower case t
 8000720:	2378      	movs	r3, #120	; 0x78
 8000722:	e00e      	b.n	8000742 <char2segments+0x24a>
            case 'U' :              // lower case u
            case 'u' : return 0x1c; // lower case u
 8000724:	231c      	movs	r3, #28
 8000726:	e00c      	b.n	8000742 <char2segments+0x24a>
            case 'V' :              // twice tall u
            case 'v' : return 0x3e; // twice tall u
 8000728:	233e      	movs	r3, #62	; 0x3e
 800072a:	e00a      	b.n	8000742 <char2segments+0x24a>
            case 'W' : return 0x7e; // upside down A
 800072c:	237e      	movs	r3, #126	; 0x7e
 800072e:	e008      	b.n	8000742 <char2segments+0x24a>
            case 'w' : return 0x2a; // separated w
 8000730:	232a      	movs	r3, #42	; 0x2a
 8000732:	e006      	b.n	8000742 <char2segments+0x24a>
            case 'X' :              // upper case H
            case 'x' : return 0x76; // upper case H
 8000734:	2376      	movs	r3, #118	; 0x76
 8000736:	e004      	b.n	8000742 <char2segments+0x24a>
            case 'Y' :              // lower case y
            case 'y' : return 0x6e; // lower case y
 8000738:	236e      	movs	r3, #110	; 0x6e
 800073a:	e002      	b.n	8000742 <char2segments+0x24a>
            case 'Z' :              // separated Z
            case 'z' : return 0x1b; // separated Z
 800073c:	231b      	movs	r3, #27
 800073e:	e000      	b.n	8000742 <char2segments+0x24a>
        }
        return 0;
 8000740:	2300      	movs	r3, #0
    }
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	2b00      	cmp	r3, #0
 800075c:	db0b      	blt.n	8000776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f003 021f 	and.w	r2, r3, #31
 8000764:	4906      	ldr	r1, [pc, #24]	; (8000780 <__NVIC_EnableIRQ+0x34>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	095b      	lsrs	r3, r3, #5
 800076c:	2001      	movs	r0, #1
 800076e:	fa00 f202 	lsl.w	r2, r0, r2
 8000772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	e000e100 	.word	0xe000e100

08000784 <main>:
uint32_t Timer1  = 0;
uint8_t CurrentDisplay[4] = {0};
uint8_t tm1637_Segments[8] = {0};

int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	//	tm1637_Segments[4] = E_SEG;
	//	tm1637_Segments[5] = F_SEG;
	//	tm1637_Segments[6] = G_SEG;
	//	tm1637_Segments[7] = DP_SEG;

	HAL_Init();
 8000788:	f000 fb7a 	bl	8000e80 <HAL_Init>
	SystemClock_Config();
 800078c:	f000 f97a 	bl	8000a84 <SystemClock_Config>

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);		// TM1637 Display pins
 8000790:	2201      	movs	r2, #1
 8000792:	2140      	movs	r1, #64	; 0x40
 8000794:	485b      	ldr	r0, [pc, #364]	; (8000904 <main+0x180>)
 8000796:	f000 fe78 	bl	800148a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	4859      	ldr	r0, [pc, #356]	; (8000904 <main+0x180>)
 80007a0:	f000 fe73 	bl	800148a <HAL_GPIO_WritePin>
	MX_USART1_UART_Init();
 80007a4:	f000 f9b4 	bl	8000b10 <MX_USART1_UART_Init>
	init_hardware_timer_version();
 80007a8:	f000 f92e 	bl	8000a08 <init_hardware_timer_version>
//	init_gpio_interrupt();
	MX_GPIO_Init();
 80007ac:	f000 f9da 	bl	8000b64 <MX_GPIO_Init>

	//	MX_I2C1_Init();

	NVIC_EnableIRQ(TIM3_IRQn);
 80007b0:	201d      	movs	r0, #29
 80007b2:	f7ff ffcb 	bl	800074c <__NVIC_EnableIRQ>

	Timer1Enable = ENABLE;										//Turn on systick based timer
 80007b6:	4b54      	ldr	r3, [pc, #336]	; (8000908 <main+0x184>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]

	while (1)
	{


		if (circle_count < 0 && (ANTIHORARIO == 0))		// si gira en sentido creciente y (contador de vuelta < 0) reseteo contador de vueltas
 80007bc:	4b53      	ldr	r3, [pc, #332]	; (800090c <main+0x188>)
 80007be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	da09      	bge.n	80007da <main+0x56>
 80007c6:	4b52      	ldr	r3, [pc, #328]	; (8000910 <main+0x18c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	091b      	lsrs	r3, r3, #4
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d102      	bne.n	80007da <main+0x56>
		{
			circle_count = 0;
 80007d4:	4b4d      	ldr	r3, [pc, #308]	; (800090c <main+0x188>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	801a      	strh	r2, [r3, #0]
		}
		if (circle_count < 0 && (ANTIHORARIO == 1))		// si gira en sentido decreciente y (contador de vuelta < 0) reseteo contador del timer
 80007da:	4b4c      	ldr	r3, [pc, #304]	; (800090c <main+0x188>)
 80007dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	da09      	bge.n	80007f8 <main+0x74>
 80007e4:	4b4a      	ldr	r3, [pc, #296]	; (8000910 <main+0x18c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	091b      	lsrs	r3, r3, #4
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d102      	bne.n	80007f8 <main+0x74>
		{
			TIM3->CNT = TIM_CNT_DEFAULT;
 80007f2:	4b47      	ldr	r3, [pc, #284]	; (8000910 <main+0x18c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if ( circle_count >= 0)							// si (contador de vuelta > 0) imprimo medicion
 80007f8:	4b44      	ldr	r3, [pc, #272]	; (800090c <main+0x188>)
 80007fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	db0d      	blt.n	800081e <main+0x9a>
		{
			medicion = (TIM3->CNT + (TIM_CNT_MAX + 0x01) * circle_count) / AVANCE ;
 8000802:	4b43      	ldr	r3, [pc, #268]	; (8000910 <main+0x18c>)
 8000804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000806:	4a41      	ldr	r2, [pc, #260]	; (800090c <main+0x188>)
 8000808:	f9b2 2000 	ldrsh.w	r2, [r2]
 800080c:	0412      	lsls	r2, r2, #16
 800080e:	4413      	add	r3, r2
 8000810:	4a40      	ldr	r2, [pc, #256]	; (8000914 <main+0x190>)
 8000812:	fba2 2303 	umull	r2, r3, r2, r3
 8000816:	099b      	lsrs	r3, r3, #6
 8000818:	4a3f      	ldr	r2, [pc, #252]	; (8000918 <main+0x194>)
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	e002      	b.n	8000824 <main+0xa0>

		}
		else											// si (contador de vuelta < 0) imprimo 0
		{
			medicion = 0;
 800081e:	4b3e      	ldr	r3, [pc, #248]	; (8000918 <main+0x194>)
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
		}

		CurrentDisplay[0] = char2segments((char) (medicion / 1000) + '0');
 8000824:	4b3c      	ldr	r3, [pc, #240]	; (8000918 <main+0x194>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a3c      	ldr	r2, [pc, #240]	; (800091c <main+0x198>)
 800082a:	fba2 2303 	umull	r2, r3, r2, r3
 800082e:	099b      	lsrs	r3, r3, #6
 8000830:	b2db      	uxtb	r3, r3
 8000832:	3330      	adds	r3, #48	; 0x30
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fe5e 	bl	80004f8 <char2segments>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	4b37      	ldr	r3, [pc, #220]	; (8000920 <main+0x19c>)
 8000842:	701a      	strb	r2, [r3, #0]
		CurrentDisplay[1] = DP_SEG | char2segments((char) ((medicion % 1000) / 100) + '0');
 8000844:	4b34      	ldr	r3, [pc, #208]	; (8000918 <main+0x194>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b34      	ldr	r3, [pc, #208]	; (800091c <main+0x198>)
 800084a:	fba3 1302 	umull	r1, r3, r3, r2
 800084e:	099b      	lsrs	r3, r3, #6
 8000850:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000854:	fb01 f303 	mul.w	r3, r1, r3
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	4a32      	ldr	r2, [pc, #200]	; (8000924 <main+0x1a0>)
 800085c:	fba2 2303 	umull	r2, r3, r2, r3
 8000860:	095b      	lsrs	r3, r3, #5
 8000862:	b2db      	uxtb	r3, r3
 8000864:	3330      	adds	r3, #48	; 0x30
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fe45 	bl	80004f8 <char2segments>
 800086e:	4603      	mov	r3, r0
 8000870:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <main+0x19c>)
 8000878:	705a      	strb	r2, [r3, #1]
		CurrentDisplay[2] = char2segments((char) ((medicion % 100) / 10) + '0');
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <main+0x194>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b29      	ldr	r3, [pc, #164]	; (8000924 <main+0x1a0>)
 8000880:	fba3 1302 	umull	r1, r3, r3, r2
 8000884:	095b      	lsrs	r3, r3, #5
 8000886:	2164      	movs	r1, #100	; 0x64
 8000888:	fb01 f303 	mul.w	r3, r1, r3
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	4a26      	ldr	r2, [pc, #152]	; (8000928 <main+0x1a4>)
 8000890:	fba2 2303 	umull	r2, r3, r2, r3
 8000894:	08db      	lsrs	r3, r3, #3
 8000896:	b2db      	uxtb	r3, r3
 8000898:	3330      	adds	r3, #48	; 0x30
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fe2b 	bl	80004f8 <char2segments>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <main+0x19c>)
 80008a8:	709a      	strb	r2, [r3, #2]
		CurrentDisplay[3] = char2segments((char) (medicion % 10) + '0');
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <main+0x194>)
 80008ac:	6819      	ldr	r1, [r3, #0]
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <main+0x1a4>)
 80008b0:	fba3 2301 	umull	r2, r3, r3, r1
 80008b4:	08da      	lsrs	r2, r3, #3
 80008b6:	4613      	mov	r3, r2
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4413      	add	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	1aca      	subs	r2, r1, r3
 80008c0:	b2d3      	uxtb	r3, r2
 80008c2:	3330      	adds	r3, #48	; 0x30
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fe16 	bl	80004f8 <char2segments>
 80008cc:	4603      	mov	r3, r0
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <main+0x19c>)
 80008d2:	70da      	strb	r2, [r3, #3]

		tm1637_DisplayHandle(7, CurrentDisplay);
 80008d4:	4912      	ldr	r1, [pc, #72]	; (8000920 <main+0x19c>)
 80008d6:	2007      	movs	r0, #7
 80008d8:	f7ff fd9e 	bl	8000418 <tm1637_DisplayHandle>

		printMsg("enc: %d  vueltas: %d Medicion %d\n",TIM3->CNT, circle_count, medicion);
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <main+0x18c>)
 80008de:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <main+0x188>)
 80008e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <main+0x194>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	480f      	ldr	r0, [pc, #60]	; (800092c <main+0x1a8>)
 80008ee:	f000 f859 	bl	80009a4 <printMsg>

		HAL_Delay(10);
 80008f2:	200a      	movs	r0, #10
 80008f4:	f000 fb26 	bl	8000f44 <HAL_Delay>

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <main+0x1ac>)
 80008fe:	f000 fddc 	bl	80014ba <HAL_GPIO_TogglePin>
		if (circle_count < 0 && (ANTIHORARIO == 0))		// si gira en sentido creciente y (contador de vuelta < 0) reseteo contador de vueltas
 8000902:	e75b      	b.n	80007bc <main+0x38>
 8000904:	40010c00 	.word	0x40010c00
 8000908:	20000000 	.word	0x20000000
 800090c:	20000090 	.word	0x20000090
 8000910:	40000400 	.word	0x40000400
 8000914:	f0f0f0f1 	.word	0xf0f0f0f1
 8000918:	20000094 	.word	0x20000094
 800091c:	10624dd3 	.word	0x10624dd3
 8000920:	2000009c 	.word	0x2000009c
 8000924:	51eb851f 	.word	0x51eb851f
 8000928:	cccccccd 	.word	0xcccccccd
 800092c:	080027c8 	.word	0x080027c8
 8000930:	40011000 	.word	0x40011000

08000934 <TIM3_IRQHandler>:
	}
}

void TIM3_IRQHandler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	if (TIM3->SR & 0x01)
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <TIM3_IRQHandler+0x68>)
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	2b00      	cmp	r3, #0
 8000942:	d020      	beq.n	8000986 <TIM3_IRQHandler+0x52>
	{
		if( ANTIHORARIO == 0 )	    // rebalse por overflow
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <TIM3_IRQHandler+0x68>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	091b      	lsrs	r3, r3, #4
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	2b00      	cmp	r3, #0
 8000950:	d109      	bne.n	8000966 <TIM3_IRQHandler+0x32>
		{
			circle_count ++;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <TIM3_IRQHandler+0x6c>)
 8000954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000958:	b29b      	uxth	r3, r3
 800095a:	3301      	adds	r3, #1
 800095c:	b29b      	uxth	r3, r3
 800095e:	b21a      	sxth	r2, r3
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <TIM3_IRQHandler+0x6c>)
 8000962:	801a      	strh	r2, [r3, #0]
 8000964:	e00f      	b.n	8000986 <TIM3_IRQHandler+0x52>
		}
		else if( ANTIHORARIO == 1 )	// rebalse por underflow
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <TIM3_IRQHandler+0x68>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	091b      	lsrs	r3, r3, #4
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	2b01      	cmp	r3, #1
 8000972:	d108      	bne.n	8000986 <TIM3_IRQHandler+0x52>
		{
			circle_count --;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <TIM3_IRQHandler+0x6c>)
 8000976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800097a:	b29b      	uxth	r3, r3
 800097c:	3b01      	subs	r3, #1
 800097e:	b29b      	uxth	r3, r3
 8000980:	b21a      	sxth	r2, r3
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <TIM3_IRQHandler+0x6c>)
 8000984:	801a      	strh	r2, [r3, #0]
		}
	}

	TIM3->SR &= ~(0x01);  			// Reset flag de interrupcion
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <TIM3_IRQHandler+0x68>)
 8000988:	691b      	ldr	r3, [r3, #16]
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <TIM3_IRQHandler+0x68>)
 800098c:	f023 0301 	bic.w	r3, r3, #1
 8000990:	6113      	str	r3, [r2, #16]
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40000400 	.word	0x40000400
 80009a0:	20000090 	.word	0x20000090

080009a4 <printMsg>:
//	NVIC_EnableIRQ(EXTI0_IRQn);
//	NVIC_EnableIRQ(EXTI1_IRQn);
//
//}
static void printMsg(char *msg, ...)
{
 80009a4:	b40f      	push	{r0, r1, r2, r3}
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b096      	sub	sp, #88	; 0x58
 80009aa:	af00      	add	r7, sp, #0
	char buff[80];
#ifdef DEBUG_UART

	// extract arguments from print function
	va_list args;
	va_start(args,msg);
 80009ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009b0:	603b      	str	r3, [r7, #0]
	vsprintf(buff,msg,args);
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 fad5 	bl	8001f68 <vsiprintf>

	// send data to USART 8 bit data register
	for(int i=0; i < strlen(buff); i++)
 80009be:	2300      	movs	r3, #0
 80009c0:	657b      	str	r3, [r7, #84]	; 0x54
 80009c2:	e00f      	b.n	80009e4 <printMsg+0x40>
	{
		USART1->DR = buff[i];
 80009c4:	1d3a      	adds	r2, r7, #4
 80009c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009c8:	4413      	add	r3, r2
 80009ca:	781a      	ldrb	r2, [r3, #0]
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <printMsg+0x60>)
 80009ce:	605a      	str	r2, [r3, #4]
		while ( !(USART1->SR & USART_SR_TXE));
 80009d0:	bf00      	nop
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <printMsg+0x60>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0f9      	beq.n	80009d2 <printMsg+0x2e>
	for(int i=0; i < strlen(buff); i++)
 80009de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009e0:	3301      	adds	r3, #1
 80009e2:	657b      	str	r3, [r7, #84]	; 0x54
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fbb0 	bl	800014c <strlen>
 80009ec:	4602      	mov	r2, r0
 80009ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d8e7      	bhi.n	80009c4 <printMsg+0x20>
	}

#endif
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	3758      	adds	r7, #88	; 0x58
 80009fa:	46bd      	mov	sp, r7
 80009fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a00:	b004      	add	sp, #16
 8000a02:	4770      	bx	lr
 8000a04:	40013800 	.word	0x40013800

08000a08 <init_hardware_timer_version>:
void init_hardware_timer_version(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <init_hardware_timer_version+0x74>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a1a      	ldr	r2, [pc, #104]	; (8000a7c <init_hardware_timer_version+0x74>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; //AFIO might not even be needed?
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <init_hardware_timer_version+0x74>)
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <init_hardware_timer_version+0x74>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	61d3      	str	r3, [r2, #28]

	// TIM3->PSC = 67; // prescaler = PSC + 1
	// TIM3->EGR |= TIM_EGR_UG; // force update of the registers (including prescaler)
	// TIM3->EGR &= ~(TIM_EGR_UG);

	TIM3->ARR = TIM_CNT_MAX;  		// rebalse del counter
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <init_hardware_timer_version+0x78>)
 8000a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->DIER |= TIM_DIER_UIE;  	// habilito interrupcion por over/underflow
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <init_hardware_timer_version+0x78>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <init_hardware_timer_version+0x78>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	60d3      	str	r3, [r2, #12]
	TIM3->CNT = TIM_CNT_DEFAULT ;	// inicializo Timer counter
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <init_hardware_timer_version+0x78>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24

	//per datasheet instructions
	TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0 );  //step 1 and 2
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <init_hardware_timer_version+0x78>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <init_hardware_timer_version+0x78>)
 8000a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6193      	str	r3, [r2, #24]
	TIM3->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);  // step 3 and 4
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <init_hardware_timer_version+0x78>)
 8000a50:	6a1b      	ldr	r3, [r3, #32]
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <init_hardware_timer_version+0x78>)
 8000a54:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000a58:	6213      	str	r3, [r2, #32]
	TIM3->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;   //step 5
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <init_hardware_timer_version+0x78>)
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <init_hardware_timer_version+0x78>)
 8000a60:	f043 0303 	orr.w	r3, r3, #3
 8000a64:	6093      	str	r3, [r2, #8]
	TIM3->CR1 |= TIM_CR1_CEN;     //step 6
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <init_hardware_timer_version+0x78>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <init_hardware_timer_version+0x78>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6013      	str	r3, [r2, #0]

}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40000400 	.word	0x40000400

08000a84 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b090      	sub	sp, #64	; 0x40
 8000a88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0318 	add.w	r3, r7, #24
 8000a8e:	2228      	movs	r2, #40	; 0x28
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fa4a 	bl	8001f2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aae:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ac2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac8:	f107 0318 	add.w	r3, r7, #24
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fd0d 	bl	80014ec <HAL_RCC_OscConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000ad8:	f000 f8b2 	bl	8000c40 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000adc:	230f      	movs	r3, #15
 8000ade:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aec:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2102      	movs	r1, #2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 ff78 	bl	80019ec <HAL_RCC_ClockConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8000b02:	f000 f89d 	bl	8000c40 <Error_Handler>
	}
}
 8000b06:	bf00      	nop
 8000b08:	3740      	adds	r7, #64	; 0x40
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <MX_USART1_UART_Init>:
//	{
//		Error_Handler();
//	}
//}
static void MX_USART1_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MX_USART1_UART_Init+0x50>)
 8000b18:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b20:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b48:	f001 f8ea 	bl	8001d20 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000b52:	f000 f875 	bl	8000c40 <Error_Handler>
	}
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000100 	.word	0x20000100
 8000b60:	40013800 	.word	0x40013800

08000b64 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b78:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <MX_GPIO_Init+0xd0>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a2d      	ldr	r2, [pc, #180]	; (8000c34 <MX_GPIO_Init+0xd0>)
 8000b7e:	f043 0320 	orr.w	r3, r3, #32
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <MX_GPIO_Init+0xd0>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0320 	and.w	r3, r3, #32
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <MX_GPIO_Init+0xd0>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a27      	ldr	r2, [pc, #156]	; (8000c34 <MX_GPIO_Init+0xd0>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <MX_GPIO_Init+0xd0>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_GPIO_Init+0xd0>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <MX_GPIO_Init+0xd0>)
 8000bae:	f043 0308 	orr.w	r3, r3, #8
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_GPIO_Init+0xd0>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0308 	and.w	r3, r3, #8
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_GPIO_Init+0xd0>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	; (8000c34 <MX_GPIO_Init+0xd0>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_GPIO_Init+0xd0>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0310 	and.w	r3, r3, #16
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|SCLK_Pin|SDO_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
 8000bde:	4816      	ldr	r0, [pc, #88]	; (8000c38 <MX_GPIO_Init+0xd4>)
 8000be0:	f000 fc53 	bl	800148a <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_11|SCLK_Pin|SDO_Pin;
 8000be4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000be8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480e      	ldr	r0, [pc, #56]	; (8000c38 <MX_GPIO_Init+0xd4>)
 8000bfe:	f000 faa9 	bl	8001154 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <MX_GPIO_Init+0xd8>)
 8000c0a:	f000 fc3e 	bl	800148a <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c12:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4619      	mov	r1, r3
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_GPIO_Init+0xd8>)
 8000c28:	f000 fa94 	bl	8001154 <HAL_GPIO_Init>


}
 8000c2c:	bf00      	nop
 8000c2e:	3720      	adds	r7, #32
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	40011000 	.word	0x40011000

08000c40 <Error_Handler>:
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c48:	e7fe      	b.n	8000c48 <Error_Handler+0x8>
	...

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_MspInit+0x5c>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <HAL_MspInit+0x5c>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6193      	str	r3, [r2, #24]
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_MspInit+0x5c>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_MspInit+0x5c>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <HAL_MspInit+0x5c>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c74:	61d3      	str	r3, [r2, #28]
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_MspInit+0x5c>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_MspInit+0x60>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_MspInit+0x60>)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010000 	.word	0x40010000

08000cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <HAL_UART_MspInit+0x8c>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d131      	bne.n	8000d34 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <HAL_UART_MspInit+0x90>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a1a      	ldr	r2, [pc, #104]	; (8000d40 <HAL_UART_MspInit+0x90>)
 8000cd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_UART_MspInit+0x90>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_UART_MspInit+0x90>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <HAL_UART_MspInit+0x90>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_UART_MspInit+0x90>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	4619      	mov	r1, r3
 8000d14:	480b      	ldr	r0, [pc, #44]	; (8000d44 <HAL_UART_MspInit+0x94>)
 8000d16:	f000 fa1d 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <HAL_UART_MspInit+0x94>)
 8000d30:	f000 fa10 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40013800 	.word	0x40013800
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010800 	.word	0x40010800

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1Enable)
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <SysTick_Handler+0x28>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d005      	beq.n	8000da4 <SysTick_Handler+0x18>
		{
			Timer1++;
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <SysTick_Handler+0x2c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <SysTick_Handler+0x2c>)
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e002      	b.n	8000daa <SysTick_Handler+0x1e>
		}
		else
		{
			Timer1 = 0;
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <SysTick_Handler+0x2c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000daa:	f000 f8af 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000098 	.word	0x20000098

08000dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <_sbrk+0x5c>)
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <_sbrk+0x60>)
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_sbrk+0x64>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <_sbrk+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d207      	bcs.n	8000dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dec:	f001 f874 	bl	8001ed8 <__errno>
 8000df0:	4603      	mov	r3, r0
 8000df2:	220c      	movs	r2, #12
 8000df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e009      	b.n	8000e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <_sbrk+0x64>)
 8000e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20005000 	.word	0x20005000
 8000e1c:	00000400 	.word	0x00000400
 8000e20:	200000a0 	.word	0x200000a0
 8000e24:	20000158 	.word	0x20000158

08000e28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e34:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e36:	e003      	b.n	8000e40 <LoopCopyDataInit>

08000e38 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e3a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e3c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e3e:	3104      	adds	r1, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e40:	480a      	ldr	r0, [pc, #40]	; (8000e6c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e44:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e46:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e48:	d3f6      	bcc.n	8000e38 <CopyDataInit>
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e4c:	e002      	b.n	8000e54 <LoopFillZerobss>

08000e4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e50:	f842 3b04 	str.w	r3, [r2], #4

08000e54 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e56:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e58:	d3f9      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e5a:	f7ff ffe5 	bl	8000e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f001 f841 	bl	8001ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e62:	f7ff fc8f 	bl	8000784 <main>
  bx lr
 8000e66:	4770      	bx	lr
  ldr r3, =_sidata
 8000e68:	08002850 	.word	0x08002850
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e70:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000e74:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000e78:	20000154 	.word	0x20000154

08000e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_2_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_Init+0x28>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_Init+0x28>)
 8000e8a:	f043 0310 	orr.w	r3, r3, #16
 8000e8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 f92b 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 f808 	bl	8000eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9c:	f7ff fed6 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40022000 	.word	0x40022000

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_InitTick+0x54>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x58>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f935 	bl	800113a <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f000 f90b 	bl	8001102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <HAL_InitTick+0x5c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000004 	.word	0x20000004
 8000f04:	2000000c 	.word	0x2000000c
 8000f08:	20000008 	.word	0x20000008

08000f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_IncTick+0x1c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_IncTick+0x20>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <HAL_IncTick+0x20>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	2000000c 	.word	0x2000000c
 8000f2c:	20000140 	.word	0x20000140

08000f30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b02      	ldr	r3, [pc, #8]	; (8000f40 <HAL_GetTick+0x10>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	20000140 	.word	0x20000140

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff fff0 	bl	8000f30 <HAL_GetTick>
 8000f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d005      	beq.n	8000f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_Delay+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff ffe0 	bl	8000f30 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f7      	bhi.n	8000f6c <HAL_Delay+0x28>
  {
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000000c 	.word	0x2000000c

08000f8c <__NVIC_SetPriorityGrouping>:
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_GetPriorityGrouping>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff90 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff49 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff5e 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff90 	bl	8001044 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5f 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffb0 	bl	80010a8 <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b08b      	sub	sp, #44	; 0x2c
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001166:	e169      	b.n	800143c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001168:	2201      	movs	r2, #1
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	69fa      	ldr	r2, [r7, #28]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	429a      	cmp	r2, r3
 8001182:	f040 8158 	bne.w	8001436 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	4a9a      	ldr	r2, [pc, #616]	; (80013f4 <HAL_GPIO_Init+0x2a0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d05e      	beq.n	800124e <HAL_GPIO_Init+0xfa>
 8001190:	4a98      	ldr	r2, [pc, #608]	; (80013f4 <HAL_GPIO_Init+0x2a0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d875      	bhi.n	8001282 <HAL_GPIO_Init+0x12e>
 8001196:	4a98      	ldr	r2, [pc, #608]	; (80013f8 <HAL_GPIO_Init+0x2a4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d058      	beq.n	800124e <HAL_GPIO_Init+0xfa>
 800119c:	4a96      	ldr	r2, [pc, #600]	; (80013f8 <HAL_GPIO_Init+0x2a4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d86f      	bhi.n	8001282 <HAL_GPIO_Init+0x12e>
 80011a2:	4a96      	ldr	r2, [pc, #600]	; (80013fc <HAL_GPIO_Init+0x2a8>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d052      	beq.n	800124e <HAL_GPIO_Init+0xfa>
 80011a8:	4a94      	ldr	r2, [pc, #592]	; (80013fc <HAL_GPIO_Init+0x2a8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d869      	bhi.n	8001282 <HAL_GPIO_Init+0x12e>
 80011ae:	4a94      	ldr	r2, [pc, #592]	; (8001400 <HAL_GPIO_Init+0x2ac>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d04c      	beq.n	800124e <HAL_GPIO_Init+0xfa>
 80011b4:	4a92      	ldr	r2, [pc, #584]	; (8001400 <HAL_GPIO_Init+0x2ac>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d863      	bhi.n	8001282 <HAL_GPIO_Init+0x12e>
 80011ba:	4a92      	ldr	r2, [pc, #584]	; (8001404 <HAL_GPIO_Init+0x2b0>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d046      	beq.n	800124e <HAL_GPIO_Init+0xfa>
 80011c0:	4a90      	ldr	r2, [pc, #576]	; (8001404 <HAL_GPIO_Init+0x2b0>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d85d      	bhi.n	8001282 <HAL_GPIO_Init+0x12e>
 80011c6:	2b12      	cmp	r3, #18
 80011c8:	d82a      	bhi.n	8001220 <HAL_GPIO_Init+0xcc>
 80011ca:	2b12      	cmp	r3, #18
 80011cc:	d859      	bhi.n	8001282 <HAL_GPIO_Init+0x12e>
 80011ce:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <HAL_GPIO_Init+0x80>)
 80011d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d4:	0800124f 	.word	0x0800124f
 80011d8:	08001229 	.word	0x08001229
 80011dc:	0800123b 	.word	0x0800123b
 80011e0:	0800127d 	.word	0x0800127d
 80011e4:	08001283 	.word	0x08001283
 80011e8:	08001283 	.word	0x08001283
 80011ec:	08001283 	.word	0x08001283
 80011f0:	08001283 	.word	0x08001283
 80011f4:	08001283 	.word	0x08001283
 80011f8:	08001283 	.word	0x08001283
 80011fc:	08001283 	.word	0x08001283
 8001200:	08001283 	.word	0x08001283
 8001204:	08001283 	.word	0x08001283
 8001208:	08001283 	.word	0x08001283
 800120c:	08001283 	.word	0x08001283
 8001210:	08001283 	.word	0x08001283
 8001214:	08001283 	.word	0x08001283
 8001218:	08001231 	.word	0x08001231
 800121c:	08001245 	.word	0x08001245
 8001220:	4a79      	ldr	r2, [pc, #484]	; (8001408 <HAL_GPIO_Init+0x2b4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001226:	e02c      	b.n	8001282 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	623b      	str	r3, [r7, #32]
          break;
 800122e:	e029      	b.n	8001284 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	3304      	adds	r3, #4
 8001236:	623b      	str	r3, [r7, #32]
          break;
 8001238:	e024      	b.n	8001284 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	3308      	adds	r3, #8
 8001240:	623b      	str	r3, [r7, #32]
          break;
 8001242:	e01f      	b.n	8001284 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	330c      	adds	r3, #12
 800124a:	623b      	str	r3, [r7, #32]
          break;
 800124c:	e01a      	b.n	8001284 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001256:	2304      	movs	r3, #4
 8001258:	623b      	str	r3, [r7, #32]
          break;
 800125a:	e013      	b.n	8001284 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d105      	bne.n	8001270 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001264:	2308      	movs	r3, #8
 8001266:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	611a      	str	r2, [r3, #16]
          break;
 800126e:	e009      	b.n	8001284 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001270:	2308      	movs	r3, #8
 8001272:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	615a      	str	r2, [r3, #20]
          break;
 800127a:	e003      	b.n	8001284 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
          break;
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x130>
          break;
 8001282:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2bff      	cmp	r3, #255	; 0xff
 8001288:	d801      	bhi.n	800128e <HAL_GPIO_Init+0x13a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	e001      	b.n	8001292 <HAL_GPIO_Init+0x13e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3304      	adds	r3, #4
 8001292:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	2bff      	cmp	r3, #255	; 0xff
 8001298:	d802      	bhi.n	80012a0 <HAL_GPIO_Init+0x14c>
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	e002      	b.n	80012a6 <HAL_GPIO_Init+0x152>
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	3b08      	subs	r3, #8
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	210f      	movs	r1, #15
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	401a      	ands	r2, r3
 80012b8:	6a39      	ldr	r1, [r7, #32]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	431a      	orrs	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80b1 	beq.w	8001436 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012d4:	4b4d      	ldr	r3, [pc, #308]	; (800140c <HAL_GPIO_Init+0x2b8>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a4c      	ldr	r2, [pc, #304]	; (800140c <HAL_GPIO_Init+0x2b8>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b4a      	ldr	r3, [pc, #296]	; (800140c <HAL_GPIO_Init+0x2b8>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012ec:	4a48      	ldr	r2, [pc, #288]	; (8001410 <HAL_GPIO_Init+0x2bc>)
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	220f      	movs	r2, #15
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4013      	ands	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a40      	ldr	r2, [pc, #256]	; (8001414 <HAL_GPIO_Init+0x2c0>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d013      	beq.n	8001340 <HAL_GPIO_Init+0x1ec>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a3f      	ldr	r2, [pc, #252]	; (8001418 <HAL_GPIO_Init+0x2c4>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d00d      	beq.n	800133c <HAL_GPIO_Init+0x1e8>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a3e      	ldr	r2, [pc, #248]	; (800141c <HAL_GPIO_Init+0x2c8>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d007      	beq.n	8001338 <HAL_GPIO_Init+0x1e4>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a3d      	ldr	r2, [pc, #244]	; (8001420 <HAL_GPIO_Init+0x2cc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d101      	bne.n	8001334 <HAL_GPIO_Init+0x1e0>
 8001330:	2303      	movs	r3, #3
 8001332:	e006      	b.n	8001342 <HAL_GPIO_Init+0x1ee>
 8001334:	2304      	movs	r3, #4
 8001336:	e004      	b.n	8001342 <HAL_GPIO_Init+0x1ee>
 8001338:	2302      	movs	r3, #2
 800133a:	e002      	b.n	8001342 <HAL_GPIO_Init+0x1ee>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <HAL_GPIO_Init+0x1ee>
 8001340:	2300      	movs	r3, #0
 8001342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001344:	f002 0203 	and.w	r2, r2, #3
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	4093      	lsls	r3, r2
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001352:	492f      	ldr	r1, [pc, #188]	; (8001410 <HAL_GPIO_Init+0x2bc>)
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	492c      	ldr	r1, [pc, #176]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	600b      	str	r3, [r1, #0]
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	43db      	mvns	r3, r3
 8001382:	4928      	ldr	r1, [pc, #160]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 8001384:	4013      	ands	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d006      	beq.n	80013a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001394:	4b23      	ldr	r3, [pc, #140]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4922      	ldr	r1, [pc, #136]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	491e      	ldr	r1, [pc, #120]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d006      	beq.n	80013ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	4918      	ldr	r1, [pc, #96]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	608b      	str	r3, [r1, #8]
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	4914      	ldr	r1, [pc, #80]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d021      	beq.n	8001428 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	490e      	ldr	r1, [pc, #56]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	60cb      	str	r3, [r1, #12]
 80013f0:	e021      	b.n	8001436 <HAL_GPIO_Init+0x2e2>
 80013f2:	bf00      	nop
 80013f4:	10320000 	.word	0x10320000
 80013f8:	10310000 	.word	0x10310000
 80013fc:	10220000 	.word	0x10220000
 8001400:	10210000 	.word	0x10210000
 8001404:	10120000 	.word	0x10120000
 8001408:	10110000 	.word	0x10110000
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	40010800 	.word	0x40010800
 8001418:	40010c00 	.word	0x40010c00
 800141c:	40011000 	.word	0x40011000
 8001420:	40011400 	.word	0x40011400
 8001424:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_GPIO_Init+0x304>)
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	43db      	mvns	r3, r3
 8001430:	4909      	ldr	r1, [pc, #36]	; (8001458 <HAL_GPIO_Init+0x304>)
 8001432:	4013      	ands	r3, r2
 8001434:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	3301      	adds	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	fa22 f303 	lsr.w	r3, r2, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	f47f ae8e 	bne.w	8001168 <HAL_GPIO_Init+0x14>
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	372c      	adds	r7, #44	; 0x2c
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40010400 	.word	0x40010400

0800145c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	4013      	ands	r3, r2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e001      	b.n	800147e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	460b      	mov	r3, r1
 8001494:	807b      	strh	r3, [r7, #2]
 8001496:	4613      	mov	r3, r2
 8001498:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800149a:	787b      	ldrb	r3, [r7, #1]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a0:	887a      	ldrh	r2, [r7, #2]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014a6:	e003      	b.n	80014b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014a8:	887b      	ldrh	r3, [r7, #2]
 80014aa:	041a      	lsls	r2, r3, #16
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	611a      	str	r2, [r3, #16]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014cc:	887a      	ldrh	r2, [r7, #2]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	041a      	lsls	r2, r3, #16
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	400b      	ands	r3, r1
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	611a      	str	r2, [r3, #16]
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e26c      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8087 	beq.w	800161a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800150c:	4b92      	ldr	r3, [pc, #584]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b04      	cmp	r3, #4
 8001516:	d00c      	beq.n	8001532 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001518:	4b8f      	ldr	r3, [pc, #572]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 030c 	and.w	r3, r3, #12
 8001520:	2b08      	cmp	r3, #8
 8001522:	d112      	bne.n	800154a <HAL_RCC_OscConfig+0x5e>
 8001524:	4b8c      	ldr	r3, [pc, #560]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001530:	d10b      	bne.n	800154a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001532:	4b89      	ldr	r3, [pc, #548]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d06c      	beq.n	8001618 <HAL_RCC_OscConfig+0x12c>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d168      	bne.n	8001618 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e246      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x76>
 8001554:	4b80      	ldr	r3, [pc, #512]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a7f      	ldr	r2, [pc, #508]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 800155a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	e02e      	b.n	80015c0 <HAL_RCC_OscConfig+0xd4>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x98>
 800156a:	4b7b      	ldr	r3, [pc, #492]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a7a      	ldr	r2, [pc, #488]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 8001570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b78      	ldr	r3, [pc, #480]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a77      	ldr	r2, [pc, #476]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 800157c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e01d      	b.n	80015c0 <HAL_RCC_OscConfig+0xd4>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0xbc>
 800158e:	4b72      	ldr	r3, [pc, #456]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a71      	ldr	r2, [pc, #452]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 8001594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b6f      	ldr	r3, [pc, #444]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a6e      	ldr	r2, [pc, #440]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e00b      	b.n	80015c0 <HAL_RCC_OscConfig+0xd4>
 80015a8:	4b6b      	ldr	r3, [pc, #428]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a6a      	ldr	r2, [pc, #424]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 80015ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b68      	ldr	r3, [pc, #416]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a67      	ldr	r2, [pc, #412]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d013      	beq.n	80015f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fcb2 	bl	8000f30 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff fcae 	bl	8000f30 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b64      	cmp	r3, #100	; 0x64
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1fa      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	4b5d      	ldr	r3, [pc, #372]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0xe4>
 80015ee:	e014      	b.n	800161a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fc9e 	bl	8000f30 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fc9a 	bl	8000f30 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e1e6      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160a:	4b53      	ldr	r3, [pc, #332]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x10c>
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d063      	beq.n	80016ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001626:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00b      	beq.n	800164a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001632:	4b49      	ldr	r3, [pc, #292]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b08      	cmp	r3, #8
 800163c:	d11c      	bne.n	8001678 <HAL_RCC_OscConfig+0x18c>
 800163e:	4b46      	ldr	r3, [pc, #280]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d116      	bne.n	8001678 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164a:	4b43      	ldr	r3, [pc, #268]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d005      	beq.n	8001662 <HAL_RCC_OscConfig+0x176>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d001      	beq.n	8001662 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e1ba      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001662:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	4939      	ldr	r1, [pc, #228]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001676:	e03a      	b.n	80016ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d020      	beq.n	80016c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001680:	4b36      	ldr	r3, [pc, #216]	; (800175c <HAL_RCC_OscConfig+0x270>)
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff fc53 	bl	8000f30 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168e:	f7ff fc4f 	bl	8000f30 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e19b      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a0:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4927      	ldr	r1, [pc, #156]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	600b      	str	r3, [r1, #0]
 80016c0:	e015      	b.n	80016ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c2:	4b26      	ldr	r3, [pc, #152]	; (800175c <HAL_RCC_OscConfig+0x270>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff fc32 	bl	8000f30 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d0:	f7ff fc2e 	bl	8000f30 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e17a      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d03a      	beq.n	8001770 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d019      	beq.n	8001736 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001704:	2201      	movs	r2, #1
 8001706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001708:	f7ff fc12 	bl	8000f30 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001710:	f7ff fc0e 	bl	8000f30 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e15a      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <HAL_RCC_OscConfig+0x26c>)
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800172e:	2001      	movs	r0, #1
 8001730:	f000 fad8 	bl	8001ce4 <RCC_Delay>
 8001734:	e01c      	b.n	8001770 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_RCC_OscConfig+0x274>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173c:	f7ff fbf8 	bl	8000f30 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001742:	e00f      	b.n	8001764 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001744:	f7ff fbf4 	bl	8000f30 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d908      	bls.n	8001764 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e140      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	42420000 	.word	0x42420000
 8001760:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	4b9e      	ldr	r3, [pc, #632]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1e9      	bne.n	8001744 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80a6 	beq.w	80018ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001782:	4b97      	ldr	r3, [pc, #604]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10d      	bne.n	80017aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b94      	ldr	r3, [pc, #592]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a93      	ldr	r2, [pc, #588]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	61d3      	str	r3, [r2, #28]
 800179a:	4b91      	ldr	r3, [pc, #580]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017a6:	2301      	movs	r3, #1
 80017a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017aa:	4b8e      	ldr	r3, [pc, #568]	; (80019e4 <HAL_RCC_OscConfig+0x4f8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d118      	bne.n	80017e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b6:	4b8b      	ldr	r3, [pc, #556]	; (80019e4 <HAL_RCC_OscConfig+0x4f8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a8a      	ldr	r2, [pc, #552]	; (80019e4 <HAL_RCC_OscConfig+0x4f8>)
 80017bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c2:	f7ff fbb5 	bl	8000f30 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ca:	f7ff fbb1 	bl	8000f30 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b64      	cmp	r3, #100	; 0x64
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e0fd      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017dc:	4b81      	ldr	r3, [pc, #516]	; (80019e4 <HAL_RCC_OscConfig+0x4f8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x312>
 80017f0:	4b7b      	ldr	r3, [pc, #492]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4a7a      	ldr	r2, [pc, #488]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6213      	str	r3, [r2, #32]
 80017fc:	e02d      	b.n	800185a <HAL_RCC_OscConfig+0x36e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x334>
 8001806:	4b76      	ldr	r3, [pc, #472]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a75      	ldr	r2, [pc, #468]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6213      	str	r3, [r2, #32]
 8001812:	4b73      	ldr	r3, [pc, #460]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4a72      	ldr	r2, [pc, #456]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	f023 0304 	bic.w	r3, r3, #4
 800181c:	6213      	str	r3, [r2, #32]
 800181e:	e01c      	b.n	800185a <HAL_RCC_OscConfig+0x36e>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2b05      	cmp	r3, #5
 8001826:	d10c      	bne.n	8001842 <HAL_RCC_OscConfig+0x356>
 8001828:	4b6d      	ldr	r3, [pc, #436]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4a6c      	ldr	r2, [pc, #432]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	6213      	str	r3, [r2, #32]
 8001834:	4b6a      	ldr	r3, [pc, #424]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4a69      	ldr	r2, [pc, #420]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6213      	str	r3, [r2, #32]
 8001840:	e00b      	b.n	800185a <HAL_RCC_OscConfig+0x36e>
 8001842:	4b67      	ldr	r3, [pc, #412]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	4a66      	ldr	r2, [pc, #408]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6213      	str	r3, [r2, #32]
 800184e:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4a63      	ldr	r2, [pc, #396]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	f023 0304 	bic.w	r3, r3, #4
 8001858:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d015      	beq.n	800188e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001862:	f7ff fb65 	bl	8000f30 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001868:	e00a      	b.n	8001880 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186a:	f7ff fb61 	bl	8000f30 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	f241 3288 	movw	r2, #5000	; 0x1388
 8001878:	4293      	cmp	r3, r2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e0ab      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001880:	4b57      	ldr	r3, [pc, #348]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0ee      	beq.n	800186a <HAL_RCC_OscConfig+0x37e>
 800188c:	e014      	b.n	80018b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188e:	f7ff fb4f 	bl	8000f30 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	e00a      	b.n	80018ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff fb4b 	bl	8000f30 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e095      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ac:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1ee      	bne.n	8001896 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d105      	bne.n	80018ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018be:	4b48      	ldr	r3, [pc, #288]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	4a47      	ldr	r2, [pc, #284]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8081 	beq.w	80019d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d4:	4b42      	ldr	r3, [pc, #264]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d061      	beq.n	80019a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d146      	bne.n	8001976 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e8:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <HAL_RCC_OscConfig+0x4fc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7ff fb1f 	bl	8000f30 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f6:	f7ff fb1b 	bl	8000f30 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e067      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001908:	4b35      	ldr	r3, [pc, #212]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f0      	bne.n	80018f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191c:	d108      	bne.n	8001930 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800191e:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	492d      	ldr	r1, [pc, #180]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001930:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a19      	ldr	r1, [r3, #32]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	430b      	orrs	r3, r1
 8001942:	4927      	ldr	r1, [pc, #156]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <HAL_RCC_OscConfig+0x4fc>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194e:	f7ff faef 	bl	8000f30 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001956:	f7ff faeb 	bl	8000f30 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e037      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001968:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x46a>
 8001974:	e02f      	b.n	80019d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_RCC_OscConfig+0x4fc>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fad8 	bl	8000f30 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff fad4 	bl	8000f30 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e020      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x498>
 80019a2:	e018      	b.n	80019d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e013      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d001      	beq.n	80019d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40007000 	.word	0x40007000
 80019e8:	42420060 	.word	0x42420060

080019ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0d0      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a00:	4b6a      	ldr	r3, [pc, #424]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d910      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b67      	ldr	r3, [pc, #412]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 0207 	bic.w	r2, r3, #7
 8001a16:	4965      	ldr	r1, [pc, #404]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b63      	ldr	r3, [pc, #396]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0b8      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d020      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a48:	4b59      	ldr	r3, [pc, #356]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a60:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4a52      	ldr	r2, [pc, #328]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6c:	4b50      	ldr	r3, [pc, #320]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	494d      	ldr	r1, [pc, #308]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d040      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d115      	bne.n	8001aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e07f      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e073      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aba:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e06b      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aca:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f023 0203 	bic.w	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4936      	ldr	r1, [pc, #216]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001adc:	f7ff fa28 	bl	8000f30 <HAL_GetTick>
 8001ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae4:	f7ff fa24 	bl	8000f30 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e053      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 020c 	and.w	r2, r3, #12
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d1eb      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d210      	bcs.n	8001b3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 0207 	bic.w	r2, r3, #7
 8001b22:	4922      	ldr	r1, [pc, #136]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e032      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4916      	ldr	r1, [pc, #88]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d009      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	490e      	ldr	r1, [pc, #56]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b7a:	f000 f821 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	490a      	ldr	r1, [pc, #40]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8c:	5ccb      	ldrb	r3, [r1, r3]
 8001b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b92:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8001b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1d0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff f986 	bl	8000eac <HAL_InitTick>

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	080027fc 	.word	0x080027fc
 8001bb8:	20000004 	.word	0x20000004
 8001bbc:	20000008 	.word	0x20000008

08001bc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc0:	b490      	push	{r4, r7}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bc8:	1d3c      	adds	r4, r7, #4
 8001bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bd0:	f240 2301 	movw	r3, #513	; 0x201
 8001bd4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d002      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0x40>
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d003      	beq.n	8001c06 <HAL_RCC_GetSysClockFreq+0x46>
 8001bfe:	e02d      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c02:	623b      	str	r3, [r7, #32]
      break;
 8001c04:	e02d      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	0c9b      	lsrs	r3, r3, #18
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c12:	4413      	add	r3, r2
 8001c14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c18:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d013      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	0c5b      	lsrs	r3, r3, #17
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c32:	4413      	add	r3, r2
 8001c34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3e:	fb02 f203 	mul.w	r2, r2, r3
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4a:	e004      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c50:	fb02 f303 	mul.w	r3, r2, r3
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	623b      	str	r3, [r7, #32]
      break;
 8001c5a:	e002      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c5e:	623b      	str	r3, [r7, #32]
      break;
 8001c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c62:	6a3b      	ldr	r3, [r7, #32]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3728      	adds	r7, #40	; 0x28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc90      	pop	{r4, r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	080027ec 	.word	0x080027ec
 8001c74:	40021000 	.word	0x40021000
 8001c78:	007a1200 	.word	0x007a1200
 8001c7c:	003d0900 	.word	0x003d0900

08001c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c84:	4b02      	ldr	r3, [pc, #8]	; (8001c90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c98:	f7ff fff2 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	0a1b      	lsrs	r3, r3, #8
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	4903      	ldr	r1, [pc, #12]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	0800280c 	.word	0x0800280c

08001cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc0:	f7ff ffde 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	0adb      	lsrs	r3, r3, #11
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4903      	ldr	r1, [pc, #12]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	0800280c 	.word	0x0800280c

08001ce4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <RCC_Delay+0x34>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <RCC_Delay+0x38>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0a5b      	lsrs	r3, r3, #9
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d00:	bf00      	nop
  }
  while (Delay --);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1e5a      	subs	r2, r3, #1
 8001d06:	60fa      	str	r2, [r7, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f9      	bne.n	8001d00 <RCC_Delay+0x1c>
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	20000004 	.word	0x20000004
 8001d1c:	10624dd3 	.word	0x10624dd3

08001d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e03f      	b.n	8001db2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7fe ffb2 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2224      	movs	r2, #36	; 0x24
 8001d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f829 	bl	8001dbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001df6:	f023 030c 	bic.w	r3, r3, #12
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	68b9      	ldr	r1, [r7, #8]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699a      	ldr	r2, [r3, #24]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a2c      	ldr	r2, [pc, #176]	; (8001ed0 <UART_SetConfig+0x114>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d103      	bne.n	8001e2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e24:	f7ff ff4a 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	e002      	b.n	8001e32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e2c:	f7ff ff32 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 8001e30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	009a      	lsls	r2, r3, #2
 8001e3c:	441a      	add	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <UART_SetConfig+0x118>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	0119      	lsls	r1, r3, #4
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	009a      	lsls	r2, r3, #2
 8001e5c:	441a      	add	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <UART_SetConfig+0x118>)
 8001e6a:	fba3 0302 	umull	r0, r3, r3, r2
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	2064      	movs	r0, #100	; 0x64
 8001e72:	fb00 f303 	mul.w	r3, r0, r3
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	3332      	adds	r3, #50	; 0x32
 8001e7c:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <UART_SetConfig+0x118>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e88:	4419      	add	r1, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	009a      	lsls	r2, r3, #2
 8001e94:	441a      	add	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <UART_SetConfig+0x118>)
 8001ea2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	2064      	movs	r0, #100	; 0x64
 8001eaa:	fb00 f303 	mul.w	r3, r0, r3
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	3332      	adds	r3, #50	; 0x32
 8001eb4:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <UART_SetConfig+0x118>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	f003 020f 	and.w	r2, r3, #15
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	440a      	add	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40013800 	.word	0x40013800
 8001ed4:	51eb851f 	.word	0x51eb851f

08001ed8 <__errno>:
 8001ed8:	4b01      	ldr	r3, [pc, #4]	; (8001ee0 <__errno+0x8>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000010 	.word	0x20000010

08001ee4 <__libc_init_array>:
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	2600      	movs	r6, #0
 8001ee8:	4d0c      	ldr	r5, [pc, #48]	; (8001f1c <__libc_init_array+0x38>)
 8001eea:	4c0d      	ldr	r4, [pc, #52]	; (8001f20 <__libc_init_array+0x3c>)
 8001eec:	1b64      	subs	r4, r4, r5
 8001eee:	10a4      	asrs	r4, r4, #2
 8001ef0:	42a6      	cmp	r6, r4
 8001ef2:	d109      	bne.n	8001f08 <__libc_init_array+0x24>
 8001ef4:	f000 fc5c 	bl	80027b0 <_init>
 8001ef8:	2600      	movs	r6, #0
 8001efa:	4d0a      	ldr	r5, [pc, #40]	; (8001f24 <__libc_init_array+0x40>)
 8001efc:	4c0a      	ldr	r4, [pc, #40]	; (8001f28 <__libc_init_array+0x44>)
 8001efe:	1b64      	subs	r4, r4, r5
 8001f00:	10a4      	asrs	r4, r4, #2
 8001f02:	42a6      	cmp	r6, r4
 8001f04:	d105      	bne.n	8001f12 <__libc_init_array+0x2e>
 8001f06:	bd70      	pop	{r4, r5, r6, pc}
 8001f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f0c:	4798      	blx	r3
 8001f0e:	3601      	adds	r6, #1
 8001f10:	e7ee      	b.n	8001ef0 <__libc_init_array+0xc>
 8001f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f16:	4798      	blx	r3
 8001f18:	3601      	adds	r6, #1
 8001f1a:	e7f2      	b.n	8001f02 <__libc_init_array+0x1e>
 8001f1c:	08002848 	.word	0x08002848
 8001f20:	08002848 	.word	0x08002848
 8001f24:	08002848 	.word	0x08002848
 8001f28:	0800284c 	.word	0x0800284c

08001f2c <memset>:
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4402      	add	r2, r0
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d100      	bne.n	8001f36 <memset+0xa>
 8001f34:	4770      	bx	lr
 8001f36:	f803 1b01 	strb.w	r1, [r3], #1
 8001f3a:	e7f9      	b.n	8001f30 <memset+0x4>

08001f3c <_vsiprintf_r>:
 8001f3c:	b500      	push	{lr}
 8001f3e:	b09b      	sub	sp, #108	; 0x6c
 8001f40:	9100      	str	r1, [sp, #0]
 8001f42:	9104      	str	r1, [sp, #16]
 8001f44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001f48:	9105      	str	r1, [sp, #20]
 8001f4a:	9102      	str	r1, [sp, #8]
 8001f4c:	4905      	ldr	r1, [pc, #20]	; (8001f64 <_vsiprintf_r+0x28>)
 8001f4e:	9103      	str	r1, [sp, #12]
 8001f50:	4669      	mov	r1, sp
 8001f52:	f000 f86f 	bl	8002034 <_svfiprintf_r>
 8001f56:	2200      	movs	r2, #0
 8001f58:	9b00      	ldr	r3, [sp, #0]
 8001f5a:	701a      	strb	r2, [r3, #0]
 8001f5c:	b01b      	add	sp, #108	; 0x6c
 8001f5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f62:	bf00      	nop
 8001f64:	ffff0208 	.word	0xffff0208

08001f68 <vsiprintf>:
 8001f68:	4613      	mov	r3, r2
 8001f6a:	460a      	mov	r2, r1
 8001f6c:	4601      	mov	r1, r0
 8001f6e:	4802      	ldr	r0, [pc, #8]	; (8001f78 <vsiprintf+0x10>)
 8001f70:	6800      	ldr	r0, [r0, #0]
 8001f72:	f7ff bfe3 	b.w	8001f3c <_vsiprintf_r>
 8001f76:	bf00      	nop
 8001f78:	20000010 	.word	0x20000010

08001f7c <__ssputs_r>:
 8001f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f80:	688e      	ldr	r6, [r1, #8]
 8001f82:	4682      	mov	sl, r0
 8001f84:	429e      	cmp	r6, r3
 8001f86:	460c      	mov	r4, r1
 8001f88:	4690      	mov	r8, r2
 8001f8a:	461f      	mov	r7, r3
 8001f8c:	d838      	bhi.n	8002000 <__ssputs_r+0x84>
 8001f8e:	898a      	ldrh	r2, [r1, #12]
 8001f90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f94:	d032      	beq.n	8001ffc <__ssputs_r+0x80>
 8001f96:	6825      	ldr	r5, [r4, #0]
 8001f98:	6909      	ldr	r1, [r1, #16]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	eba5 0901 	sub.w	r9, r5, r1
 8001fa0:	6965      	ldr	r5, [r4, #20]
 8001fa2:	444b      	add	r3, r9
 8001fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001fa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001fac:	106d      	asrs	r5, r5, #1
 8001fae:	429d      	cmp	r5, r3
 8001fb0:	bf38      	it	cc
 8001fb2:	461d      	movcc	r5, r3
 8001fb4:	0553      	lsls	r3, r2, #21
 8001fb6:	d531      	bpl.n	800201c <__ssputs_r+0xa0>
 8001fb8:	4629      	mov	r1, r5
 8001fba:	f000 fb53 	bl	8002664 <_malloc_r>
 8001fbe:	4606      	mov	r6, r0
 8001fc0:	b950      	cbnz	r0, 8001fd8 <__ssputs_r+0x5c>
 8001fc2:	230c      	movs	r3, #12
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f8ca 3000 	str.w	r3, [sl]
 8001fcc:	89a3      	ldrh	r3, [r4, #12]
 8001fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fd2:	81a3      	strh	r3, [r4, #12]
 8001fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fd8:	464a      	mov	r2, r9
 8001fda:	6921      	ldr	r1, [r4, #16]
 8001fdc:	f000 face 	bl	800257c <memcpy>
 8001fe0:	89a3      	ldrh	r3, [r4, #12]
 8001fe2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fea:	81a3      	strh	r3, [r4, #12]
 8001fec:	6126      	str	r6, [r4, #16]
 8001fee:	444e      	add	r6, r9
 8001ff0:	6026      	str	r6, [r4, #0]
 8001ff2:	463e      	mov	r6, r7
 8001ff4:	6165      	str	r5, [r4, #20]
 8001ff6:	eba5 0509 	sub.w	r5, r5, r9
 8001ffa:	60a5      	str	r5, [r4, #8]
 8001ffc:	42be      	cmp	r6, r7
 8001ffe:	d900      	bls.n	8002002 <__ssputs_r+0x86>
 8002000:	463e      	mov	r6, r7
 8002002:	4632      	mov	r2, r6
 8002004:	4641      	mov	r1, r8
 8002006:	6820      	ldr	r0, [r4, #0]
 8002008:	f000 fac6 	bl	8002598 <memmove>
 800200c:	68a3      	ldr	r3, [r4, #8]
 800200e:	6822      	ldr	r2, [r4, #0]
 8002010:	1b9b      	subs	r3, r3, r6
 8002012:	4432      	add	r2, r6
 8002014:	2000      	movs	r0, #0
 8002016:	60a3      	str	r3, [r4, #8]
 8002018:	6022      	str	r2, [r4, #0]
 800201a:	e7db      	b.n	8001fd4 <__ssputs_r+0x58>
 800201c:	462a      	mov	r2, r5
 800201e:	f000 fb7b 	bl	8002718 <_realloc_r>
 8002022:	4606      	mov	r6, r0
 8002024:	2800      	cmp	r0, #0
 8002026:	d1e1      	bne.n	8001fec <__ssputs_r+0x70>
 8002028:	4650      	mov	r0, sl
 800202a:	6921      	ldr	r1, [r4, #16]
 800202c:	f000 face 	bl	80025cc <_free_r>
 8002030:	e7c7      	b.n	8001fc2 <__ssputs_r+0x46>
	...

08002034 <_svfiprintf_r>:
 8002034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002038:	4698      	mov	r8, r3
 800203a:	898b      	ldrh	r3, [r1, #12]
 800203c:	4607      	mov	r7, r0
 800203e:	061b      	lsls	r3, r3, #24
 8002040:	460d      	mov	r5, r1
 8002042:	4614      	mov	r4, r2
 8002044:	b09d      	sub	sp, #116	; 0x74
 8002046:	d50e      	bpl.n	8002066 <_svfiprintf_r+0x32>
 8002048:	690b      	ldr	r3, [r1, #16]
 800204a:	b963      	cbnz	r3, 8002066 <_svfiprintf_r+0x32>
 800204c:	2140      	movs	r1, #64	; 0x40
 800204e:	f000 fb09 	bl	8002664 <_malloc_r>
 8002052:	6028      	str	r0, [r5, #0]
 8002054:	6128      	str	r0, [r5, #16]
 8002056:	b920      	cbnz	r0, 8002062 <_svfiprintf_r+0x2e>
 8002058:	230c      	movs	r3, #12
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	e0d1      	b.n	8002206 <_svfiprintf_r+0x1d2>
 8002062:	2340      	movs	r3, #64	; 0x40
 8002064:	616b      	str	r3, [r5, #20]
 8002066:	2300      	movs	r3, #0
 8002068:	9309      	str	r3, [sp, #36]	; 0x24
 800206a:	2320      	movs	r3, #32
 800206c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002070:	2330      	movs	r3, #48	; 0x30
 8002072:	f04f 0901 	mov.w	r9, #1
 8002076:	f8cd 800c 	str.w	r8, [sp, #12]
 800207a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002220 <_svfiprintf_r+0x1ec>
 800207e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002082:	4623      	mov	r3, r4
 8002084:	469a      	mov	sl, r3
 8002086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800208a:	b10a      	cbz	r2, 8002090 <_svfiprintf_r+0x5c>
 800208c:	2a25      	cmp	r2, #37	; 0x25
 800208e:	d1f9      	bne.n	8002084 <_svfiprintf_r+0x50>
 8002090:	ebba 0b04 	subs.w	fp, sl, r4
 8002094:	d00b      	beq.n	80020ae <_svfiprintf_r+0x7a>
 8002096:	465b      	mov	r3, fp
 8002098:	4622      	mov	r2, r4
 800209a:	4629      	mov	r1, r5
 800209c:	4638      	mov	r0, r7
 800209e:	f7ff ff6d 	bl	8001f7c <__ssputs_r>
 80020a2:	3001      	adds	r0, #1
 80020a4:	f000 80aa 	beq.w	80021fc <_svfiprintf_r+0x1c8>
 80020a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020aa:	445a      	add	r2, fp
 80020ac:	9209      	str	r2, [sp, #36]	; 0x24
 80020ae:	f89a 3000 	ldrb.w	r3, [sl]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 80a2 	beq.w	80021fc <_svfiprintf_r+0x1c8>
 80020b8:	2300      	movs	r3, #0
 80020ba:	f04f 32ff 	mov.w	r2, #4294967295
 80020be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020c2:	f10a 0a01 	add.w	sl, sl, #1
 80020c6:	9304      	str	r3, [sp, #16]
 80020c8:	9307      	str	r3, [sp, #28]
 80020ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020ce:	931a      	str	r3, [sp, #104]	; 0x68
 80020d0:	4654      	mov	r4, sl
 80020d2:	2205      	movs	r2, #5
 80020d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020d8:	4851      	ldr	r0, [pc, #324]	; (8002220 <_svfiprintf_r+0x1ec>)
 80020da:	f000 fa41 	bl	8002560 <memchr>
 80020de:	9a04      	ldr	r2, [sp, #16]
 80020e0:	b9d8      	cbnz	r0, 800211a <_svfiprintf_r+0xe6>
 80020e2:	06d0      	lsls	r0, r2, #27
 80020e4:	bf44      	itt	mi
 80020e6:	2320      	movmi	r3, #32
 80020e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020ec:	0711      	lsls	r1, r2, #28
 80020ee:	bf44      	itt	mi
 80020f0:	232b      	movmi	r3, #43	; 0x2b
 80020f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020f6:	f89a 3000 	ldrb.w	r3, [sl]
 80020fa:	2b2a      	cmp	r3, #42	; 0x2a
 80020fc:	d015      	beq.n	800212a <_svfiprintf_r+0xf6>
 80020fe:	4654      	mov	r4, sl
 8002100:	2000      	movs	r0, #0
 8002102:	f04f 0c0a 	mov.w	ip, #10
 8002106:	9a07      	ldr	r2, [sp, #28]
 8002108:	4621      	mov	r1, r4
 800210a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800210e:	3b30      	subs	r3, #48	; 0x30
 8002110:	2b09      	cmp	r3, #9
 8002112:	d94e      	bls.n	80021b2 <_svfiprintf_r+0x17e>
 8002114:	b1b0      	cbz	r0, 8002144 <_svfiprintf_r+0x110>
 8002116:	9207      	str	r2, [sp, #28]
 8002118:	e014      	b.n	8002144 <_svfiprintf_r+0x110>
 800211a:	eba0 0308 	sub.w	r3, r0, r8
 800211e:	fa09 f303 	lsl.w	r3, r9, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	46a2      	mov	sl, r4
 8002126:	9304      	str	r3, [sp, #16]
 8002128:	e7d2      	b.n	80020d0 <_svfiprintf_r+0x9c>
 800212a:	9b03      	ldr	r3, [sp, #12]
 800212c:	1d19      	adds	r1, r3, #4
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	9103      	str	r1, [sp, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	bfbb      	ittet	lt
 8002136:	425b      	neglt	r3, r3
 8002138:	f042 0202 	orrlt.w	r2, r2, #2
 800213c:	9307      	strge	r3, [sp, #28]
 800213e:	9307      	strlt	r3, [sp, #28]
 8002140:	bfb8      	it	lt
 8002142:	9204      	strlt	r2, [sp, #16]
 8002144:	7823      	ldrb	r3, [r4, #0]
 8002146:	2b2e      	cmp	r3, #46	; 0x2e
 8002148:	d10c      	bne.n	8002164 <_svfiprintf_r+0x130>
 800214a:	7863      	ldrb	r3, [r4, #1]
 800214c:	2b2a      	cmp	r3, #42	; 0x2a
 800214e:	d135      	bne.n	80021bc <_svfiprintf_r+0x188>
 8002150:	9b03      	ldr	r3, [sp, #12]
 8002152:	3402      	adds	r4, #2
 8002154:	1d1a      	adds	r2, r3, #4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	9203      	str	r2, [sp, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	bfb8      	it	lt
 800215e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002162:	9305      	str	r3, [sp, #20]
 8002164:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002230 <_svfiprintf_r+0x1fc>
 8002168:	2203      	movs	r2, #3
 800216a:	4650      	mov	r0, sl
 800216c:	7821      	ldrb	r1, [r4, #0]
 800216e:	f000 f9f7 	bl	8002560 <memchr>
 8002172:	b140      	cbz	r0, 8002186 <_svfiprintf_r+0x152>
 8002174:	2340      	movs	r3, #64	; 0x40
 8002176:	eba0 000a 	sub.w	r0, r0, sl
 800217a:	fa03 f000 	lsl.w	r0, r3, r0
 800217e:	9b04      	ldr	r3, [sp, #16]
 8002180:	3401      	adds	r4, #1
 8002182:	4303      	orrs	r3, r0
 8002184:	9304      	str	r3, [sp, #16]
 8002186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800218a:	2206      	movs	r2, #6
 800218c:	4825      	ldr	r0, [pc, #148]	; (8002224 <_svfiprintf_r+0x1f0>)
 800218e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002192:	f000 f9e5 	bl	8002560 <memchr>
 8002196:	2800      	cmp	r0, #0
 8002198:	d038      	beq.n	800220c <_svfiprintf_r+0x1d8>
 800219a:	4b23      	ldr	r3, [pc, #140]	; (8002228 <_svfiprintf_r+0x1f4>)
 800219c:	bb1b      	cbnz	r3, 80021e6 <_svfiprintf_r+0x1b2>
 800219e:	9b03      	ldr	r3, [sp, #12]
 80021a0:	3307      	adds	r3, #7
 80021a2:	f023 0307 	bic.w	r3, r3, #7
 80021a6:	3308      	adds	r3, #8
 80021a8:	9303      	str	r3, [sp, #12]
 80021aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021ac:	4433      	add	r3, r6
 80021ae:	9309      	str	r3, [sp, #36]	; 0x24
 80021b0:	e767      	b.n	8002082 <_svfiprintf_r+0x4e>
 80021b2:	460c      	mov	r4, r1
 80021b4:	2001      	movs	r0, #1
 80021b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80021ba:	e7a5      	b.n	8002108 <_svfiprintf_r+0xd4>
 80021bc:	2300      	movs	r3, #0
 80021be:	f04f 0c0a 	mov.w	ip, #10
 80021c2:	4619      	mov	r1, r3
 80021c4:	3401      	adds	r4, #1
 80021c6:	9305      	str	r3, [sp, #20]
 80021c8:	4620      	mov	r0, r4
 80021ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021ce:	3a30      	subs	r2, #48	; 0x30
 80021d0:	2a09      	cmp	r2, #9
 80021d2:	d903      	bls.n	80021dc <_svfiprintf_r+0x1a8>
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0c5      	beq.n	8002164 <_svfiprintf_r+0x130>
 80021d8:	9105      	str	r1, [sp, #20]
 80021da:	e7c3      	b.n	8002164 <_svfiprintf_r+0x130>
 80021dc:	4604      	mov	r4, r0
 80021de:	2301      	movs	r3, #1
 80021e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80021e4:	e7f0      	b.n	80021c8 <_svfiprintf_r+0x194>
 80021e6:	ab03      	add	r3, sp, #12
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	462a      	mov	r2, r5
 80021ec:	4638      	mov	r0, r7
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <_svfiprintf_r+0x1f8>)
 80021f0:	a904      	add	r1, sp, #16
 80021f2:	f3af 8000 	nop.w
 80021f6:	1c42      	adds	r2, r0, #1
 80021f8:	4606      	mov	r6, r0
 80021fa:	d1d6      	bne.n	80021aa <_svfiprintf_r+0x176>
 80021fc:	89ab      	ldrh	r3, [r5, #12]
 80021fe:	065b      	lsls	r3, r3, #25
 8002200:	f53f af2c 	bmi.w	800205c <_svfiprintf_r+0x28>
 8002204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002206:	b01d      	add	sp, #116	; 0x74
 8002208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800220c:	ab03      	add	r3, sp, #12
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	462a      	mov	r2, r5
 8002212:	4638      	mov	r0, r7
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <_svfiprintf_r+0x1f8>)
 8002216:	a904      	add	r1, sp, #16
 8002218:	f000 f87c 	bl	8002314 <_printf_i>
 800221c:	e7eb      	b.n	80021f6 <_svfiprintf_r+0x1c2>
 800221e:	bf00      	nop
 8002220:	08002814 	.word	0x08002814
 8002224:	0800281e 	.word	0x0800281e
 8002228:	00000000 	.word	0x00000000
 800222c:	08001f7d 	.word	0x08001f7d
 8002230:	0800281a 	.word	0x0800281a

08002234 <_printf_common>:
 8002234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002238:	4616      	mov	r6, r2
 800223a:	4699      	mov	r9, r3
 800223c:	688a      	ldr	r2, [r1, #8]
 800223e:	690b      	ldr	r3, [r1, #16]
 8002240:	4607      	mov	r7, r0
 8002242:	4293      	cmp	r3, r2
 8002244:	bfb8      	it	lt
 8002246:	4613      	movlt	r3, r2
 8002248:	6033      	str	r3, [r6, #0]
 800224a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800224e:	460c      	mov	r4, r1
 8002250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002254:	b10a      	cbz	r2, 800225a <_printf_common+0x26>
 8002256:	3301      	adds	r3, #1
 8002258:	6033      	str	r3, [r6, #0]
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	0699      	lsls	r1, r3, #26
 800225e:	bf42      	ittt	mi
 8002260:	6833      	ldrmi	r3, [r6, #0]
 8002262:	3302      	addmi	r3, #2
 8002264:	6033      	strmi	r3, [r6, #0]
 8002266:	6825      	ldr	r5, [r4, #0]
 8002268:	f015 0506 	ands.w	r5, r5, #6
 800226c:	d106      	bne.n	800227c <_printf_common+0x48>
 800226e:	f104 0a19 	add.w	sl, r4, #25
 8002272:	68e3      	ldr	r3, [r4, #12]
 8002274:	6832      	ldr	r2, [r6, #0]
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	42ab      	cmp	r3, r5
 800227a:	dc28      	bgt.n	80022ce <_printf_common+0x9a>
 800227c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002280:	1e13      	subs	r3, r2, #0
 8002282:	6822      	ldr	r2, [r4, #0]
 8002284:	bf18      	it	ne
 8002286:	2301      	movne	r3, #1
 8002288:	0692      	lsls	r2, r2, #26
 800228a:	d42d      	bmi.n	80022e8 <_printf_common+0xb4>
 800228c:	4649      	mov	r1, r9
 800228e:	4638      	mov	r0, r7
 8002290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002294:	47c0      	blx	r8
 8002296:	3001      	adds	r0, #1
 8002298:	d020      	beq.n	80022dc <_printf_common+0xa8>
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	68e5      	ldr	r5, [r4, #12]
 800229e:	f003 0306 	and.w	r3, r3, #6
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf18      	it	ne
 80022a6:	2500      	movne	r5, #0
 80022a8:	6832      	ldr	r2, [r6, #0]
 80022aa:	f04f 0600 	mov.w	r6, #0
 80022ae:	68a3      	ldr	r3, [r4, #8]
 80022b0:	bf08      	it	eq
 80022b2:	1aad      	subeq	r5, r5, r2
 80022b4:	6922      	ldr	r2, [r4, #16]
 80022b6:	bf08      	it	eq
 80022b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022bc:	4293      	cmp	r3, r2
 80022be:	bfc4      	itt	gt
 80022c0:	1a9b      	subgt	r3, r3, r2
 80022c2:	18ed      	addgt	r5, r5, r3
 80022c4:	341a      	adds	r4, #26
 80022c6:	42b5      	cmp	r5, r6
 80022c8:	d11a      	bne.n	8002300 <_printf_common+0xcc>
 80022ca:	2000      	movs	r0, #0
 80022cc:	e008      	b.n	80022e0 <_printf_common+0xac>
 80022ce:	2301      	movs	r3, #1
 80022d0:	4652      	mov	r2, sl
 80022d2:	4649      	mov	r1, r9
 80022d4:	4638      	mov	r0, r7
 80022d6:	47c0      	blx	r8
 80022d8:	3001      	adds	r0, #1
 80022da:	d103      	bne.n	80022e4 <_printf_common+0xb0>
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022e4:	3501      	adds	r5, #1
 80022e6:	e7c4      	b.n	8002272 <_printf_common+0x3e>
 80022e8:	2030      	movs	r0, #48	; 0x30
 80022ea:	18e1      	adds	r1, r4, r3
 80022ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022f6:	4422      	add	r2, r4
 80022f8:	3302      	adds	r3, #2
 80022fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022fe:	e7c5      	b.n	800228c <_printf_common+0x58>
 8002300:	2301      	movs	r3, #1
 8002302:	4622      	mov	r2, r4
 8002304:	4649      	mov	r1, r9
 8002306:	4638      	mov	r0, r7
 8002308:	47c0      	blx	r8
 800230a:	3001      	adds	r0, #1
 800230c:	d0e6      	beq.n	80022dc <_printf_common+0xa8>
 800230e:	3601      	adds	r6, #1
 8002310:	e7d9      	b.n	80022c6 <_printf_common+0x92>
	...

08002314 <_printf_i>:
 8002314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002318:	460c      	mov	r4, r1
 800231a:	7e27      	ldrb	r7, [r4, #24]
 800231c:	4691      	mov	r9, r2
 800231e:	2f78      	cmp	r7, #120	; 0x78
 8002320:	4680      	mov	r8, r0
 8002322:	469a      	mov	sl, r3
 8002324:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002326:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800232a:	d807      	bhi.n	800233c <_printf_i+0x28>
 800232c:	2f62      	cmp	r7, #98	; 0x62
 800232e:	d80a      	bhi.n	8002346 <_printf_i+0x32>
 8002330:	2f00      	cmp	r7, #0
 8002332:	f000 80d9 	beq.w	80024e8 <_printf_i+0x1d4>
 8002336:	2f58      	cmp	r7, #88	; 0x58
 8002338:	f000 80a4 	beq.w	8002484 <_printf_i+0x170>
 800233c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002344:	e03a      	b.n	80023bc <_printf_i+0xa8>
 8002346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800234a:	2b15      	cmp	r3, #21
 800234c:	d8f6      	bhi.n	800233c <_printf_i+0x28>
 800234e:	a001      	add	r0, pc, #4	; (adr r0, 8002354 <_printf_i+0x40>)
 8002350:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002354:	080023ad 	.word	0x080023ad
 8002358:	080023c1 	.word	0x080023c1
 800235c:	0800233d 	.word	0x0800233d
 8002360:	0800233d 	.word	0x0800233d
 8002364:	0800233d 	.word	0x0800233d
 8002368:	0800233d 	.word	0x0800233d
 800236c:	080023c1 	.word	0x080023c1
 8002370:	0800233d 	.word	0x0800233d
 8002374:	0800233d 	.word	0x0800233d
 8002378:	0800233d 	.word	0x0800233d
 800237c:	0800233d 	.word	0x0800233d
 8002380:	080024cf 	.word	0x080024cf
 8002384:	080023f1 	.word	0x080023f1
 8002388:	080024b1 	.word	0x080024b1
 800238c:	0800233d 	.word	0x0800233d
 8002390:	0800233d 	.word	0x0800233d
 8002394:	080024f1 	.word	0x080024f1
 8002398:	0800233d 	.word	0x0800233d
 800239c:	080023f1 	.word	0x080023f1
 80023a0:	0800233d 	.word	0x0800233d
 80023a4:	0800233d 	.word	0x0800233d
 80023a8:	080024b9 	.word	0x080024b9
 80023ac:	680b      	ldr	r3, [r1, #0]
 80023ae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80023b2:	1d1a      	adds	r2, r3, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	600a      	str	r2, [r1, #0]
 80023b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023bc:	2301      	movs	r3, #1
 80023be:	e0a4      	b.n	800250a <_printf_i+0x1f6>
 80023c0:	6825      	ldr	r5, [r4, #0]
 80023c2:	6808      	ldr	r0, [r1, #0]
 80023c4:	062e      	lsls	r6, r5, #24
 80023c6:	f100 0304 	add.w	r3, r0, #4
 80023ca:	d50a      	bpl.n	80023e2 <_printf_i+0xce>
 80023cc:	6805      	ldr	r5, [r0, #0]
 80023ce:	600b      	str	r3, [r1, #0]
 80023d0:	2d00      	cmp	r5, #0
 80023d2:	da03      	bge.n	80023dc <_printf_i+0xc8>
 80023d4:	232d      	movs	r3, #45	; 0x2d
 80023d6:	426d      	negs	r5, r5
 80023d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023dc:	230a      	movs	r3, #10
 80023de:	485e      	ldr	r0, [pc, #376]	; (8002558 <_printf_i+0x244>)
 80023e0:	e019      	b.n	8002416 <_printf_i+0x102>
 80023e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80023e6:	6805      	ldr	r5, [r0, #0]
 80023e8:	600b      	str	r3, [r1, #0]
 80023ea:	bf18      	it	ne
 80023ec:	b22d      	sxthne	r5, r5
 80023ee:	e7ef      	b.n	80023d0 <_printf_i+0xbc>
 80023f0:	680b      	ldr	r3, [r1, #0]
 80023f2:	6825      	ldr	r5, [r4, #0]
 80023f4:	1d18      	adds	r0, r3, #4
 80023f6:	6008      	str	r0, [r1, #0]
 80023f8:	0628      	lsls	r0, r5, #24
 80023fa:	d501      	bpl.n	8002400 <_printf_i+0xec>
 80023fc:	681d      	ldr	r5, [r3, #0]
 80023fe:	e002      	b.n	8002406 <_printf_i+0xf2>
 8002400:	0669      	lsls	r1, r5, #25
 8002402:	d5fb      	bpl.n	80023fc <_printf_i+0xe8>
 8002404:	881d      	ldrh	r5, [r3, #0]
 8002406:	2f6f      	cmp	r7, #111	; 0x6f
 8002408:	bf0c      	ite	eq
 800240a:	2308      	moveq	r3, #8
 800240c:	230a      	movne	r3, #10
 800240e:	4852      	ldr	r0, [pc, #328]	; (8002558 <_printf_i+0x244>)
 8002410:	2100      	movs	r1, #0
 8002412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002416:	6866      	ldr	r6, [r4, #4]
 8002418:	2e00      	cmp	r6, #0
 800241a:	bfa8      	it	ge
 800241c:	6821      	ldrge	r1, [r4, #0]
 800241e:	60a6      	str	r6, [r4, #8]
 8002420:	bfa4      	itt	ge
 8002422:	f021 0104 	bicge.w	r1, r1, #4
 8002426:	6021      	strge	r1, [r4, #0]
 8002428:	b90d      	cbnz	r5, 800242e <_printf_i+0x11a>
 800242a:	2e00      	cmp	r6, #0
 800242c:	d04d      	beq.n	80024ca <_printf_i+0x1b6>
 800242e:	4616      	mov	r6, r2
 8002430:	fbb5 f1f3 	udiv	r1, r5, r3
 8002434:	fb03 5711 	mls	r7, r3, r1, r5
 8002438:	5dc7      	ldrb	r7, [r0, r7]
 800243a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800243e:	462f      	mov	r7, r5
 8002440:	42bb      	cmp	r3, r7
 8002442:	460d      	mov	r5, r1
 8002444:	d9f4      	bls.n	8002430 <_printf_i+0x11c>
 8002446:	2b08      	cmp	r3, #8
 8002448:	d10b      	bne.n	8002462 <_printf_i+0x14e>
 800244a:	6823      	ldr	r3, [r4, #0]
 800244c:	07df      	lsls	r7, r3, #31
 800244e:	d508      	bpl.n	8002462 <_printf_i+0x14e>
 8002450:	6923      	ldr	r3, [r4, #16]
 8002452:	6861      	ldr	r1, [r4, #4]
 8002454:	4299      	cmp	r1, r3
 8002456:	bfde      	ittt	le
 8002458:	2330      	movle	r3, #48	; 0x30
 800245a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800245e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002462:	1b92      	subs	r2, r2, r6
 8002464:	6122      	str	r2, [r4, #16]
 8002466:	464b      	mov	r3, r9
 8002468:	4621      	mov	r1, r4
 800246a:	4640      	mov	r0, r8
 800246c:	f8cd a000 	str.w	sl, [sp]
 8002470:	aa03      	add	r2, sp, #12
 8002472:	f7ff fedf 	bl	8002234 <_printf_common>
 8002476:	3001      	adds	r0, #1
 8002478:	d14c      	bne.n	8002514 <_printf_i+0x200>
 800247a:	f04f 30ff 	mov.w	r0, #4294967295
 800247e:	b004      	add	sp, #16
 8002480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002484:	4834      	ldr	r0, [pc, #208]	; (8002558 <_printf_i+0x244>)
 8002486:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800248a:	680e      	ldr	r6, [r1, #0]
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002492:	061f      	lsls	r7, r3, #24
 8002494:	600e      	str	r6, [r1, #0]
 8002496:	d514      	bpl.n	80024c2 <_printf_i+0x1ae>
 8002498:	07d9      	lsls	r1, r3, #31
 800249a:	bf44      	itt	mi
 800249c:	f043 0320 	orrmi.w	r3, r3, #32
 80024a0:	6023      	strmi	r3, [r4, #0]
 80024a2:	b91d      	cbnz	r5, 80024ac <_printf_i+0x198>
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	f023 0320 	bic.w	r3, r3, #32
 80024aa:	6023      	str	r3, [r4, #0]
 80024ac:	2310      	movs	r3, #16
 80024ae:	e7af      	b.n	8002410 <_printf_i+0xfc>
 80024b0:	6823      	ldr	r3, [r4, #0]
 80024b2:	f043 0320 	orr.w	r3, r3, #32
 80024b6:	6023      	str	r3, [r4, #0]
 80024b8:	2378      	movs	r3, #120	; 0x78
 80024ba:	4828      	ldr	r0, [pc, #160]	; (800255c <_printf_i+0x248>)
 80024bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024c0:	e7e3      	b.n	800248a <_printf_i+0x176>
 80024c2:	065e      	lsls	r6, r3, #25
 80024c4:	bf48      	it	mi
 80024c6:	b2ad      	uxthmi	r5, r5
 80024c8:	e7e6      	b.n	8002498 <_printf_i+0x184>
 80024ca:	4616      	mov	r6, r2
 80024cc:	e7bb      	b.n	8002446 <_printf_i+0x132>
 80024ce:	680b      	ldr	r3, [r1, #0]
 80024d0:	6826      	ldr	r6, [r4, #0]
 80024d2:	1d1d      	adds	r5, r3, #4
 80024d4:	6960      	ldr	r0, [r4, #20]
 80024d6:	600d      	str	r5, [r1, #0]
 80024d8:	0635      	lsls	r5, r6, #24
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	d501      	bpl.n	80024e2 <_printf_i+0x1ce>
 80024de:	6018      	str	r0, [r3, #0]
 80024e0:	e002      	b.n	80024e8 <_printf_i+0x1d4>
 80024e2:	0671      	lsls	r1, r6, #25
 80024e4:	d5fb      	bpl.n	80024de <_printf_i+0x1ca>
 80024e6:	8018      	strh	r0, [r3, #0]
 80024e8:	2300      	movs	r3, #0
 80024ea:	4616      	mov	r6, r2
 80024ec:	6123      	str	r3, [r4, #16]
 80024ee:	e7ba      	b.n	8002466 <_printf_i+0x152>
 80024f0:	680b      	ldr	r3, [r1, #0]
 80024f2:	1d1a      	adds	r2, r3, #4
 80024f4:	600a      	str	r2, [r1, #0]
 80024f6:	681e      	ldr	r6, [r3, #0]
 80024f8:	2100      	movs	r1, #0
 80024fa:	4630      	mov	r0, r6
 80024fc:	6862      	ldr	r2, [r4, #4]
 80024fe:	f000 f82f 	bl	8002560 <memchr>
 8002502:	b108      	cbz	r0, 8002508 <_printf_i+0x1f4>
 8002504:	1b80      	subs	r0, r0, r6
 8002506:	6060      	str	r0, [r4, #4]
 8002508:	6863      	ldr	r3, [r4, #4]
 800250a:	6123      	str	r3, [r4, #16]
 800250c:	2300      	movs	r3, #0
 800250e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002512:	e7a8      	b.n	8002466 <_printf_i+0x152>
 8002514:	4632      	mov	r2, r6
 8002516:	4649      	mov	r1, r9
 8002518:	4640      	mov	r0, r8
 800251a:	6923      	ldr	r3, [r4, #16]
 800251c:	47d0      	blx	sl
 800251e:	3001      	adds	r0, #1
 8002520:	d0ab      	beq.n	800247a <_printf_i+0x166>
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	079b      	lsls	r3, r3, #30
 8002526:	d413      	bmi.n	8002550 <_printf_i+0x23c>
 8002528:	68e0      	ldr	r0, [r4, #12]
 800252a:	9b03      	ldr	r3, [sp, #12]
 800252c:	4298      	cmp	r0, r3
 800252e:	bfb8      	it	lt
 8002530:	4618      	movlt	r0, r3
 8002532:	e7a4      	b.n	800247e <_printf_i+0x16a>
 8002534:	2301      	movs	r3, #1
 8002536:	4632      	mov	r2, r6
 8002538:	4649      	mov	r1, r9
 800253a:	4640      	mov	r0, r8
 800253c:	47d0      	blx	sl
 800253e:	3001      	adds	r0, #1
 8002540:	d09b      	beq.n	800247a <_printf_i+0x166>
 8002542:	3501      	adds	r5, #1
 8002544:	68e3      	ldr	r3, [r4, #12]
 8002546:	9903      	ldr	r1, [sp, #12]
 8002548:	1a5b      	subs	r3, r3, r1
 800254a:	42ab      	cmp	r3, r5
 800254c:	dcf2      	bgt.n	8002534 <_printf_i+0x220>
 800254e:	e7eb      	b.n	8002528 <_printf_i+0x214>
 8002550:	2500      	movs	r5, #0
 8002552:	f104 0619 	add.w	r6, r4, #25
 8002556:	e7f5      	b.n	8002544 <_printf_i+0x230>
 8002558:	08002825 	.word	0x08002825
 800255c:	08002836 	.word	0x08002836

08002560 <memchr>:
 8002560:	4603      	mov	r3, r0
 8002562:	b510      	push	{r4, lr}
 8002564:	b2c9      	uxtb	r1, r1
 8002566:	4402      	add	r2, r0
 8002568:	4293      	cmp	r3, r2
 800256a:	4618      	mov	r0, r3
 800256c:	d101      	bne.n	8002572 <memchr+0x12>
 800256e:	2000      	movs	r0, #0
 8002570:	e003      	b.n	800257a <memchr+0x1a>
 8002572:	7804      	ldrb	r4, [r0, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	428c      	cmp	r4, r1
 8002578:	d1f6      	bne.n	8002568 <memchr+0x8>
 800257a:	bd10      	pop	{r4, pc}

0800257c <memcpy>:
 800257c:	440a      	add	r2, r1
 800257e:	4291      	cmp	r1, r2
 8002580:	f100 33ff 	add.w	r3, r0, #4294967295
 8002584:	d100      	bne.n	8002588 <memcpy+0xc>
 8002586:	4770      	bx	lr
 8002588:	b510      	push	{r4, lr}
 800258a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800258e:	4291      	cmp	r1, r2
 8002590:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002594:	d1f9      	bne.n	800258a <memcpy+0xe>
 8002596:	bd10      	pop	{r4, pc}

08002598 <memmove>:
 8002598:	4288      	cmp	r0, r1
 800259a:	b510      	push	{r4, lr}
 800259c:	eb01 0402 	add.w	r4, r1, r2
 80025a0:	d902      	bls.n	80025a8 <memmove+0x10>
 80025a2:	4284      	cmp	r4, r0
 80025a4:	4623      	mov	r3, r4
 80025a6:	d807      	bhi.n	80025b8 <memmove+0x20>
 80025a8:	1e43      	subs	r3, r0, #1
 80025aa:	42a1      	cmp	r1, r4
 80025ac:	d008      	beq.n	80025c0 <memmove+0x28>
 80025ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80025b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80025b6:	e7f8      	b.n	80025aa <memmove+0x12>
 80025b8:	4601      	mov	r1, r0
 80025ba:	4402      	add	r2, r0
 80025bc:	428a      	cmp	r2, r1
 80025be:	d100      	bne.n	80025c2 <memmove+0x2a>
 80025c0:	bd10      	pop	{r4, pc}
 80025c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80025c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80025ca:	e7f7      	b.n	80025bc <memmove+0x24>

080025cc <_free_r>:
 80025cc:	b538      	push	{r3, r4, r5, lr}
 80025ce:	4605      	mov	r5, r0
 80025d0:	2900      	cmp	r1, #0
 80025d2:	d043      	beq.n	800265c <_free_r+0x90>
 80025d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025d8:	1f0c      	subs	r4, r1, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bfb8      	it	lt
 80025de:	18e4      	addlt	r4, r4, r3
 80025e0:	f000 f8d0 	bl	8002784 <__malloc_lock>
 80025e4:	4a1e      	ldr	r2, [pc, #120]	; (8002660 <_free_r+0x94>)
 80025e6:	6813      	ldr	r3, [r2, #0]
 80025e8:	4610      	mov	r0, r2
 80025ea:	b933      	cbnz	r3, 80025fa <_free_r+0x2e>
 80025ec:	6063      	str	r3, [r4, #4]
 80025ee:	6014      	str	r4, [r2, #0]
 80025f0:	4628      	mov	r0, r5
 80025f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025f6:	f000 b8cb 	b.w	8002790 <__malloc_unlock>
 80025fa:	42a3      	cmp	r3, r4
 80025fc:	d90a      	bls.n	8002614 <_free_r+0x48>
 80025fe:	6821      	ldr	r1, [r4, #0]
 8002600:	1862      	adds	r2, r4, r1
 8002602:	4293      	cmp	r3, r2
 8002604:	bf01      	itttt	eq
 8002606:	681a      	ldreq	r2, [r3, #0]
 8002608:	685b      	ldreq	r3, [r3, #4]
 800260a:	1852      	addeq	r2, r2, r1
 800260c:	6022      	streq	r2, [r4, #0]
 800260e:	6063      	str	r3, [r4, #4]
 8002610:	6004      	str	r4, [r0, #0]
 8002612:	e7ed      	b.n	80025f0 <_free_r+0x24>
 8002614:	461a      	mov	r2, r3
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	b10b      	cbz	r3, 800261e <_free_r+0x52>
 800261a:	42a3      	cmp	r3, r4
 800261c:	d9fa      	bls.n	8002614 <_free_r+0x48>
 800261e:	6811      	ldr	r1, [r2, #0]
 8002620:	1850      	adds	r0, r2, r1
 8002622:	42a0      	cmp	r0, r4
 8002624:	d10b      	bne.n	800263e <_free_r+0x72>
 8002626:	6820      	ldr	r0, [r4, #0]
 8002628:	4401      	add	r1, r0
 800262a:	1850      	adds	r0, r2, r1
 800262c:	4283      	cmp	r3, r0
 800262e:	6011      	str	r1, [r2, #0]
 8002630:	d1de      	bne.n	80025f0 <_free_r+0x24>
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4401      	add	r1, r0
 8002638:	6011      	str	r1, [r2, #0]
 800263a:	6053      	str	r3, [r2, #4]
 800263c:	e7d8      	b.n	80025f0 <_free_r+0x24>
 800263e:	d902      	bls.n	8002646 <_free_r+0x7a>
 8002640:	230c      	movs	r3, #12
 8002642:	602b      	str	r3, [r5, #0]
 8002644:	e7d4      	b.n	80025f0 <_free_r+0x24>
 8002646:	6820      	ldr	r0, [r4, #0]
 8002648:	1821      	adds	r1, r4, r0
 800264a:	428b      	cmp	r3, r1
 800264c:	bf01      	itttt	eq
 800264e:	6819      	ldreq	r1, [r3, #0]
 8002650:	685b      	ldreq	r3, [r3, #4]
 8002652:	1809      	addeq	r1, r1, r0
 8002654:	6021      	streq	r1, [r4, #0]
 8002656:	6063      	str	r3, [r4, #4]
 8002658:	6054      	str	r4, [r2, #4]
 800265a:	e7c9      	b.n	80025f0 <_free_r+0x24>
 800265c:	bd38      	pop	{r3, r4, r5, pc}
 800265e:	bf00      	nop
 8002660:	200000a4 	.word	0x200000a4

08002664 <_malloc_r>:
 8002664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002666:	1ccd      	adds	r5, r1, #3
 8002668:	f025 0503 	bic.w	r5, r5, #3
 800266c:	3508      	adds	r5, #8
 800266e:	2d0c      	cmp	r5, #12
 8002670:	bf38      	it	cc
 8002672:	250c      	movcc	r5, #12
 8002674:	2d00      	cmp	r5, #0
 8002676:	4606      	mov	r6, r0
 8002678:	db01      	blt.n	800267e <_malloc_r+0x1a>
 800267a:	42a9      	cmp	r1, r5
 800267c:	d903      	bls.n	8002686 <_malloc_r+0x22>
 800267e:	230c      	movs	r3, #12
 8002680:	6033      	str	r3, [r6, #0]
 8002682:	2000      	movs	r0, #0
 8002684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002686:	f000 f87d 	bl	8002784 <__malloc_lock>
 800268a:	4921      	ldr	r1, [pc, #132]	; (8002710 <_malloc_r+0xac>)
 800268c:	680a      	ldr	r2, [r1, #0]
 800268e:	4614      	mov	r4, r2
 8002690:	b99c      	cbnz	r4, 80026ba <_malloc_r+0x56>
 8002692:	4f20      	ldr	r7, [pc, #128]	; (8002714 <_malloc_r+0xb0>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b923      	cbnz	r3, 80026a2 <_malloc_r+0x3e>
 8002698:	4621      	mov	r1, r4
 800269a:	4630      	mov	r0, r6
 800269c:	f000 f862 	bl	8002764 <_sbrk_r>
 80026a0:	6038      	str	r0, [r7, #0]
 80026a2:	4629      	mov	r1, r5
 80026a4:	4630      	mov	r0, r6
 80026a6:	f000 f85d 	bl	8002764 <_sbrk_r>
 80026aa:	1c43      	adds	r3, r0, #1
 80026ac:	d123      	bne.n	80026f6 <_malloc_r+0x92>
 80026ae:	230c      	movs	r3, #12
 80026b0:	4630      	mov	r0, r6
 80026b2:	6033      	str	r3, [r6, #0]
 80026b4:	f000 f86c 	bl	8002790 <__malloc_unlock>
 80026b8:	e7e3      	b.n	8002682 <_malloc_r+0x1e>
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	1b5b      	subs	r3, r3, r5
 80026be:	d417      	bmi.n	80026f0 <_malloc_r+0x8c>
 80026c0:	2b0b      	cmp	r3, #11
 80026c2:	d903      	bls.n	80026cc <_malloc_r+0x68>
 80026c4:	6023      	str	r3, [r4, #0]
 80026c6:	441c      	add	r4, r3
 80026c8:	6025      	str	r5, [r4, #0]
 80026ca:	e004      	b.n	80026d6 <_malloc_r+0x72>
 80026cc:	6863      	ldr	r3, [r4, #4]
 80026ce:	42a2      	cmp	r2, r4
 80026d0:	bf0c      	ite	eq
 80026d2:	600b      	streq	r3, [r1, #0]
 80026d4:	6053      	strne	r3, [r2, #4]
 80026d6:	4630      	mov	r0, r6
 80026d8:	f000 f85a 	bl	8002790 <__malloc_unlock>
 80026dc:	f104 000b 	add.w	r0, r4, #11
 80026e0:	1d23      	adds	r3, r4, #4
 80026e2:	f020 0007 	bic.w	r0, r0, #7
 80026e6:	1ac2      	subs	r2, r0, r3
 80026e8:	d0cc      	beq.n	8002684 <_malloc_r+0x20>
 80026ea:	1a1b      	subs	r3, r3, r0
 80026ec:	50a3      	str	r3, [r4, r2]
 80026ee:	e7c9      	b.n	8002684 <_malloc_r+0x20>
 80026f0:	4622      	mov	r2, r4
 80026f2:	6864      	ldr	r4, [r4, #4]
 80026f4:	e7cc      	b.n	8002690 <_malloc_r+0x2c>
 80026f6:	1cc4      	adds	r4, r0, #3
 80026f8:	f024 0403 	bic.w	r4, r4, #3
 80026fc:	42a0      	cmp	r0, r4
 80026fe:	d0e3      	beq.n	80026c8 <_malloc_r+0x64>
 8002700:	1a21      	subs	r1, r4, r0
 8002702:	4630      	mov	r0, r6
 8002704:	f000 f82e 	bl	8002764 <_sbrk_r>
 8002708:	3001      	adds	r0, #1
 800270a:	d1dd      	bne.n	80026c8 <_malloc_r+0x64>
 800270c:	e7cf      	b.n	80026ae <_malloc_r+0x4a>
 800270e:	bf00      	nop
 8002710:	200000a4 	.word	0x200000a4
 8002714:	200000a8 	.word	0x200000a8

08002718 <_realloc_r>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	4607      	mov	r7, r0
 800271c:	4614      	mov	r4, r2
 800271e:	460e      	mov	r6, r1
 8002720:	b921      	cbnz	r1, 800272c <_realloc_r+0x14>
 8002722:	4611      	mov	r1, r2
 8002724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002728:	f7ff bf9c 	b.w	8002664 <_malloc_r>
 800272c:	b922      	cbnz	r2, 8002738 <_realloc_r+0x20>
 800272e:	f7ff ff4d 	bl	80025cc <_free_r>
 8002732:	4625      	mov	r5, r4
 8002734:	4628      	mov	r0, r5
 8002736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002738:	f000 f830 	bl	800279c <_malloc_usable_size_r>
 800273c:	42a0      	cmp	r0, r4
 800273e:	d20f      	bcs.n	8002760 <_realloc_r+0x48>
 8002740:	4621      	mov	r1, r4
 8002742:	4638      	mov	r0, r7
 8002744:	f7ff ff8e 	bl	8002664 <_malloc_r>
 8002748:	4605      	mov	r5, r0
 800274a:	2800      	cmp	r0, #0
 800274c:	d0f2      	beq.n	8002734 <_realloc_r+0x1c>
 800274e:	4631      	mov	r1, r6
 8002750:	4622      	mov	r2, r4
 8002752:	f7ff ff13 	bl	800257c <memcpy>
 8002756:	4631      	mov	r1, r6
 8002758:	4638      	mov	r0, r7
 800275a:	f7ff ff37 	bl	80025cc <_free_r>
 800275e:	e7e9      	b.n	8002734 <_realloc_r+0x1c>
 8002760:	4635      	mov	r5, r6
 8002762:	e7e7      	b.n	8002734 <_realloc_r+0x1c>

08002764 <_sbrk_r>:
 8002764:	b538      	push	{r3, r4, r5, lr}
 8002766:	2300      	movs	r3, #0
 8002768:	4d05      	ldr	r5, [pc, #20]	; (8002780 <_sbrk_r+0x1c>)
 800276a:	4604      	mov	r4, r0
 800276c:	4608      	mov	r0, r1
 800276e:	602b      	str	r3, [r5, #0]
 8002770:	f7fe fb24 	bl	8000dbc <_sbrk>
 8002774:	1c43      	adds	r3, r0, #1
 8002776:	d102      	bne.n	800277e <_sbrk_r+0x1a>
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	b103      	cbz	r3, 800277e <_sbrk_r+0x1a>
 800277c:	6023      	str	r3, [r4, #0]
 800277e:	bd38      	pop	{r3, r4, r5, pc}
 8002780:	20000144 	.word	0x20000144

08002784 <__malloc_lock>:
 8002784:	4801      	ldr	r0, [pc, #4]	; (800278c <__malloc_lock+0x8>)
 8002786:	f000 b811 	b.w	80027ac <__retarget_lock_acquire_recursive>
 800278a:	bf00      	nop
 800278c:	2000014c 	.word	0x2000014c

08002790 <__malloc_unlock>:
 8002790:	4801      	ldr	r0, [pc, #4]	; (8002798 <__malloc_unlock+0x8>)
 8002792:	f000 b80c 	b.w	80027ae <__retarget_lock_release_recursive>
 8002796:	bf00      	nop
 8002798:	2000014c 	.word	0x2000014c

0800279c <_malloc_usable_size_r>:
 800279c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027a0:	1f18      	subs	r0, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bfbc      	itt	lt
 80027a6:	580b      	ldrlt	r3, [r1, r0]
 80027a8:	18c0      	addlt	r0, r0, r3
 80027aa:	4770      	bx	lr

080027ac <__retarget_lock_acquire_recursive>:
 80027ac:	4770      	bx	lr

080027ae <__retarget_lock_release_recursive>:
 80027ae:	4770      	bx	lr

080027b0 <_init>:
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	bf00      	nop
 80027b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b6:	bc08      	pop	{r3}
 80027b8:	469e      	mov	lr, r3
 80027ba:	4770      	bx	lr

080027bc <_fini>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	bf00      	nop
 80027c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c2:	bc08      	pop	{r3}
 80027c4:	469e      	mov	lr, r3
 80027c6:	4770      	bx	lr
